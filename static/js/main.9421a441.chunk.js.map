{"version":3,"sources":["App.module.css","Components/NewButton.tsx","Components/NewInput.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NewButton","props","classButton","filter","title","s","activeFilter","className","onClick","callback","NewInput","value","setError","setValue","error","addTask","inputClasses","errorInput","nonErrorInput","onChange","e","currentValue","currentTarget","trim","onKeyPress","key","Todolist","useState","common","errorMessage","tasks","map","mTasks","inputChecked","isDone","id","removeTask","type","checked","changeCheckbox","changeFilter","App","v1","tasks2","setTasks2","setFilter","filteredTasks","f","t","newTask","checkbox","td","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9421a441.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"App_errorInput__dcfmk\",\"nonErrorInput\":\"App_nonErrorInput__35KCE\",\"errorMessage\":\"App_errorMessage__3h7_G\",\"activeFilter\":\"App_activeFilter__18OwP\",\"isDone\":\"App_isDone__2ibD8\",\"common\":\"App_common__1Fb0O\"};","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\n\r\ntype NewButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    filter?:string\r\n}\r\n\r\nexport const NewButton = (props:NewButtonPropsType) => {\r\n    let classButton = props.filter === props.title ? s.activeFilter : ''\r\n    return (\r\n      <button className={classButton} onClick={props.callback}>{props.title}</button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from '../App.module.css'\r\n\r\n\r\nexport type InputType = {\r\n    value: string\r\n    setError: (error: string) => void\r\n    setValue: (value: string) => void\r\n    error: string\r\n    addTask: (value: string) => void\r\n}\r\nexport const NewInput: React.FC<InputType> = ({value, setError, setValue, error, addTask}) => {\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = e.currentTarget.value.trim()\r\n        if (!currentValue) {\r\n            setError('Type some text')\r\n            setValue('')\r\n        } else {\r\n            setValue(currentValue)\r\n            setError('')\r\n        }\r\n    }\r\n    const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && value) {\r\n            addTask(value)\r\n            setValue('')\r\n        } else {\r\n            setError('Type some text')\r\n        }\r\n    }\r\n    const inputClasses = error ? s.errorInput : s.nonErrorInput\r\n    return <div>\r\n            <input className={inputClasses} value={value} onChange={changeInputValue} onKeyPress={onKeyHandler}/>\r\n    </div>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {typeFilter} from \"./App\";\r\nimport {NewButton} from \"./Components/NewButton\";\r\nimport s from'./App.module.css'\r\nimport {NewInput} from \"./Components/NewInput\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id:string) => void\r\n    changeFilter: (filter:typeFilter) =>void\r\n    addTask: (value:string) => void\r\n    changeCheckbox:(checkbox:boolean, id:string) => void\r\n    filter:typeFilter\r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\nexport function Todolist(props: PropsType) {\r\n    let [value, setValue] = useState('')\r\n    let [error, setError] = useState('')\r\n\r\n    const addHandler = ()=> {\r\n        if(value) {\r\n            props.addTask(value)\r\n            setValue('')\r\n        } else{\r\n            setError('Type some text')\r\n        }\r\n    }\r\n\r\n    // const charFooHandler = (filterValue:typeFilter)=>{\r\n    //     props.changeFilter(filterValue)\r\n    // }\r\n//-----------------------------------------------------------------------------------------------------------------\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div className={s.common }>\r\n            <NewInput value={value} error={error} setValue={setValue} setError={setError} addTask={props.addTask}/>\r\n            <NewButton callback={addHandler} title={'+'}/>\r\n        </div>\r\n        <div className={s.errorMessage}>{error}</div>\r\n        <ul>\r\n            {props.tasks.map((mTasks) => {\r\n                // debugger\r\n                const checkHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeCheckbox(e.currentTarget.checked, mTasks.id)\r\n                }\r\n                let inputChecked = mTasks.isDone ? s.isDone : ''\r\n\r\n                return (\r\n                    <li key={mTasks.id} className={inputChecked} >\r\n                        <NewButton callback={()=> props.removeTask(mTasks.id)} title={'X'}/>\r\n                        <input  type=\"checkbox\" checked={mTasks.isDone} onChange={checkHandler}/>\r\n                        <span>{mTasks.title}</span>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n\r\n        <div>\r\n            <NewButton callback={()=> props.changeFilter('All')} title={'All'} filter={props.filter}/>\r\n            <NewButton callback={()=> props.changeFilter('Active')} title={'Active'} filter={props.filter}/>\r\n            <NewButton callback={()=> props.changeFilter('Completed')} title={'Completed'} filter={props.filter}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\n//-----------------------------------------------------------------------------------------\r\nexport type typeFilter='All'|'Active'|'Completed'\r\n\r\n//-----------------------------------------------------------------------------------------\r\nfunction App() {\r\n\r\n    let [tasks2,setTasks2] = useState<Array<TaskType>>([\r\n        { id: v1(), title: \"Javascript\", isDone: true },\r\n        { id: v1(), title: \"Node JS\", isDone: false },\r\n        { id: v1(), title: \"React\", isDone: true },\r\n        { id: v1(), title: \"HTML\", isDone: false },\r\n        { id: v1(), title: \"CSS\", isDone: false },\r\n        { id: v1(), title: \"Angular\", isDone: true }\r\n    ])\r\n    let [filter, setFilter] = useState<typeFilter>('All')\r\n\r\n    const changeCheckbox = (checkbox:boolean, id:string) => {\r\n        // let task = tasks2.find(td => td.id === id)\r\n        // if(task) {task.isDone = checkbox}\r\n        // setTasks2([...tasks2])\r\n        setTasks2(tasks2.map(td => td.id === id ? {...td, isDone:checkbox}  : td))\r\n        //берем массив, ищем объект с нужным id, если находим - расчехляем объект и меняем значение isDone на пришедшее\r\n        //checkbox, если id не совпадают, то объект не изменяем\r\n    }\r\n    const removeTask = (id:string) => {\r\n        setTasks2(tasks2.filter(t => t.id !== id))\r\n    }\r\n    const addTask = (value:string) => {\r\n        let newTask = { id: v1(), title: value, isDone: false }\r\n        setTasks2([newTask,...tasks2])\r\n    }\r\n    let filteredTasks = tasks2\r\n    if(filter === 'Active') {\r\n        filteredTasks = tasks2.filter(f => !f.isDone)\r\n    }\r\n    if(filter === 'Completed') {\r\n        filteredTasks = tasks2.filter(f => f.isDone)\r\n    }\r\n    const changeFilter = (filter:typeFilter) =>{\r\n        setFilter(filter)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist\r\n                title=\"Programs\"\r\n                tasks={filteredTasks}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask }\r\n                changeCheckbox={changeCheckbox}\r\n                filter={filter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}