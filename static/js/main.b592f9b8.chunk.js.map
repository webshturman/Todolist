{"version":3,"sources":["App.module.css","Components/NewButton.tsx","Components/NewInput.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NewButton","props","classButton","filter","title","s","activeFilter","className","onClick","callback","NewInput","value","setError","setValue","error","addTask","TodolistID","inputClasses","errorInput","nonErrorInput","onChange","e","currentValue","currentTarget","trim","onKeyPress","key","Todolist","useState","hTitle","removeTodolist","common","errorMessage","tasks","map","mTasks","inputChecked","isDone","id","removeTask","type","checked","changeCheckbox","changeTodolist","App","name","todolist","setTodolist","v1","setTasks","checkbox","td","t","newTask","tl","copyTasks","filteredTasks","f","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b592f9b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"App_errorInput__dcfmk\",\"nonErrorInput\":\"App_nonErrorInput__35KCE\",\"hTitle\":\"App_hTitle__1fInL\",\"errorMessage\":\"App_errorMessage__3h7_G\",\"activeFilter\":\"App_activeFilter__18OwP\",\"isDone\":\"App_isDone__2ibD8\",\"common\":\"App_common__1Fb0O\"};","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\n\r\ntype NewButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    filter?:string\r\n}\r\n\r\nexport const NewButton = (props:NewButtonPropsType) => {\r\n    let classButton = props.filter === props.title ? s.activeFilter : ''\r\n    return (\r\n      <button className={classButton} onClick={props.callback}>{props.title}</button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from '../App.module.css'\r\n\r\n\r\nexport type InputType = {\r\n    value: string\r\n    setError: (error: string) => void\r\n    setValue: (value: string) => void\r\n    error: string\r\n    addTask: (value: string,TodolistID:string) => void\r\n    TodolistID:string\r\n}\r\nexport const NewInput: React.FC<InputType> = ({value, setError, setValue, error, addTask,  TodolistID}) => {\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = e.currentTarget.value.trim()\r\n        if (!currentValue) {\r\n            setError('Type some text')\r\n            setValue('')\r\n        } else {\r\n            setValue(currentValue)\r\n            setError('')\r\n        }\r\n    }\r\n    const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && value) {\r\n            addTask(value,TodolistID)\r\n            setValue('')\r\n        } else {\r\n            setError('Type some text')\r\n        }\r\n    }\r\n    const inputClasses = error ? s.errorInput : s.nonErrorInput\r\n    return <div>\r\n            <input className={inputClasses} value={value} onChange={changeInputValue} onKeyPress={onKeyHandler}/>\r\n    </div>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TodolistIdType, typeFilter} from \"./App\";\r\nimport {NewButton} from \"./Components/NewButton\";\r\nimport s from'./App.module.css'\r\nimport {NewInput} from \"./Components/NewInput\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id:string, TodolistID:string) => void\r\n    changeTodolist: (filter:typeFilter, TodolistID: string) =>void\r\n    addTask: (value:string, TodolistID:string) => void\r\n    changeCheckbox:(checkbox:boolean, id:string, TodolistID:string) => void\r\n    removeTodolist: (TodolistID:string) =>void\r\n    filter:typeFilter\r\n    TodolistID:string\r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\nexport function Todolist(props: PropsType) {\r\n    let [value, setValue] = useState('')\r\n    let [error, setError] = useState('')\r\n\r\n    const addHandler = ()=> {\r\n        if(value) {\r\n            props.addTask(value,props.TodolistID)\r\n            setValue('')\r\n        } else{\r\n            setError('Type some text')\r\n        }\r\n    }\r\n    const todolistRemover = ()=> props.removeTodolist(props.TodolistID)\r\n    // const charFooHandler = (filter:typeFilter)=>{\r\n    //     props.changeTodolist(filterValue,props.TodolistID)\r\n    // }\r\n//-----------------------------------------------------------------------------------------------------------------\r\n    return <div>\r\n        <h3><span className={s.hTitle}>{props.title}</span><NewButton callback={todolistRemover} title={'X'}/></h3>\r\n\r\n        <div className={s.common }>\r\n            <NewInput value={value} error={error} setValue={setValue} setError={setError} addTask={props.addTask} TodolistID={props.TodolistID}/>\r\n            <NewButton callback={addHandler} title={'+'}/>\r\n        </div>\r\n        <div className={s.errorMessage}>{error}</div>\r\n        {/*{error && <div className={s.errorMessage}>{error}</div>}*/}\r\n        <ul>\r\n            {props.tasks.map((mTasks) => {\r\n                const taskRemover = ()=> props.removeTask(mTasks.id,props.TodolistID)\r\n                const checkHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeCheckbox(e.currentTarget.checked, mTasks.id, props.TodolistID )\r\n                }\r\n                let inputChecked = mTasks.isDone ? s.isDone : ''\r\n\r\n                return (\r\n                    <li key={mTasks.id} className={inputChecked} >\r\n                        <NewButton callback={taskRemover} title={'X'}/>\r\n                        <input  type=\"checkbox\" checked={mTasks.isDone} onChange={checkHandler}/>\r\n                        <span>{mTasks.title}</span>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n\r\n        <div>\r\n            <NewButton callback={()=> props.changeTodolist('All',props.TodolistID)} title={'All'} filter={props.filter}/>\r\n            <NewButton callback={()=> props.changeTodolist('Active',props.TodolistID)} title={'Active'} filter={props.filter}/>\r\n            <NewButton callback={()=> props.changeTodolist('Completed',props.TodolistID)} title={'Completed'} filter={props.filter}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\n//-----------------------------------------------------------------------------------------\r\nexport type typeFilter = 'All' | 'Active' | 'Completed'\r\nexport type TodolistIdType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    name: string\r\n    filter: typeFilter\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------\r\nfunction App() {\r\n    const TodolistID1 = '359f-1756'\r\n    const TodolistID2 = '368d-1756'\r\n    const [todolist, setTodolist] = useState<Array<TodolistType>>([\r\n        {id: TodolistID1, name: 'What to learn', filter: 'All'},\r\n        {id: TodolistID2, name: 'What to learn Extra', filter: 'All'}\r\n    ])\r\n    let [tasks, setTasks] = useState<TodolistIdType>({\r\n            [TodolistID1]: [\r\n                {id: v1(), title: \"Javascript\", isDone: true},\r\n                {id: v1(), title: \"Node JS\", isDone: false},\r\n                {id: v1(), title: \"React\", isDone: true},\r\n            ],\r\n            [TodolistID2]: [\r\n                {id: v1(), title: \"HTML\", isDone: false},\r\n                {id: v1(), title: \"CSS\", isDone: false},\r\n                {id: v1(), title: \"Angular\", isDone: true}\r\n            ]\r\n        }\r\n    )\r\n\r\n\r\n    const changeCheckbox = (checkbox: boolean, id: string, TodolistID: string) => {\r\n        setTasks({...tasks, [TodolistID]: tasks[TodolistID].map(td => td.id === id ? {...td, isDone: checkbox} : td)})\r\n        //берем массив, ищем объект с нужным id, если находим - расчехляем объект и меняем значение isDone на пришедшее\r\n        //checkbox, если id не совпадают, то объект не изменяем\r\n    }\r\n    const removeTask = (id: string, TodolistID: string) => {\r\n        setTasks({...tasks, [TodolistID]: tasks[TodolistID].filter(t => t.id !== id)})\r\n    }\r\n    const addTask = (value: string, TodolistID: string) => {\r\n        let newTask = {id: v1(), title: value, isDone: false}\r\n        setTasks({...tasks, [TodolistID]: [newTask, ...tasks[TodolistID]]})\r\n    }\r\n\r\n    const changeTodolist = (value: typeFilter, TodolistID: string) => {\r\n        // setTodolist([...todolist, {...todolist[TodolistID], filter:value}])\r\n        setTodolist(todolist.map(td => td.id === TodolistID ? {...td, filter: value} : td))\r\n    }\r\n\r\n    const removeTodolist = (TodolistID: string) => {\r\n        setTodolist(todolist.filter(tl => tl.id !== TodolistID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[TodolistID] //вместе с тудулистом удаляем таски\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n\r\n            {todolist.map(t => {\r\n                let filteredTasks = tasks[t.id]\r\n                if (t.filter === 'Active') {\r\n                    filteredTasks = tasks[t.id].filter(f => !f.isDone)\r\n                }\r\n                if (t.filter === 'Completed') {\r\n                    filteredTasks = tasks[t.id].filter(f => f.isDone)\r\n                }\r\n                return (\r\n                    <Todolist\r\n                        key={t.id}\r\n                        TodolistID={t.id}\r\n                        title={t.name}\r\n                        tasks={filteredTasks}\r\n                        removeTask={removeTask}\r\n                        changeTodolist={changeTodolist}\r\n                        addTask={addTask}\r\n                        changeCheckbox={changeCheckbox}\r\n                        filter={t.filter}\r\n                        removeTodolist={removeTodolist}\r\n                    />)\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}