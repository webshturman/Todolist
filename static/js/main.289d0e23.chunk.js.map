{"version":3,"sources":["App.module.css","serviceWorker.ts","Components/NewButton.tsx","Components/AddItemForm.tsx","Components/EditableSpan.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","AppWithReducers.tsx","state/store.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","NewButton","props","Button","onClick","callback","variant","style","margin","size","color","filter","title","AddItemForm","addItem","useState","setTitle","error","setError","s","errorInput","nonErrorInput","TextField","value","onChange","e","currentValue","currentTarget","trim","label","onKeyPress","key","height","helperText","IconButton","EditableSpan","name","changeTitle","condition","setCondition","type","onBlur","autoFocus","onDoubleClick","initialState","addTaskAC","taskTitle","TodolistID","removeTaskAC","removedTaskID","id","changeTaskTitleAC","changedTaskTitleID","newTaskTitle","changeCheckboxAC","checkboxState","TaskID","checkbox","Todolist","dispatch","useDispatch","tasks","useSelector","state","changeTdlButton","changeTodolist","filteredTasks","f","isDone","changeTodolistTitle","removeTodolist","padding","fontSize","Delete","listStyle","map","mTasks","inputChecked","className","Checkbox","checked","v1","AppWithReducers","todolists","action","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","todolistId","spacing","t","item","Paper","elevation","rootReducer","combineReducers","tl","td","task","newTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,WAAa,wBAAwB,cAAgB,2BAA2B,aAAe,0BAA0B,aAAe,4B,+JCWtIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCROC,EAAY,SAACC,GAEtB,OACE,kBAACC,EAAA,EAAD,CAASC,QAASF,EAAMG,SAAUC,QAAS,YAAaC,MAAO,CAACC,OAAO,aAC9DC,KAAM,QAASC,MAAOR,EAAMS,SAAWT,EAAMU,MAAQ,YAAc,WACvEV,EAAMU,Q,4DCLJC,EAAmC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,QAC/C,EAAwBC,mBAAS,IAAjC,mBAAKH,EAAL,KAAYI,EAAZ,KACA,EAAwBD,oBAAS,GAAjC,mBAAKE,EAAL,KAAYC,EAAZ,KA2BqBD,EAAQE,IAAEC,WAAaD,IAAEE,cAC9C,OACI,6BACI,6BACI,kBAACC,EAAA,EAAD,CAAWC,MAAOX,EAAOY,SA9BZ,SAACC,GACtB,IAAIC,EAAeD,EAAEE,cAAcJ,MAC9BG,EAAaE,QAIdZ,EAASU,GACTR,GAAS,KAJTA,GAAS,GACTF,EAAS,MA0BgDP,KAAM,QAASoB,MAAO,QAChEC,WArBF,SAACL,GACJ,UAAVA,EAAEM,KAAmBnB,GACrBE,EAAQF,GACRI,EAAS,KAETE,GAAS,IAgBgCZ,QAAS,WAAYC,MAAO,CAACyB,OAAO,QAC9DC,WAAYhB,GAAS,iBAAkBP,MAAO,UAAWO,MAAOA,IAI3E,kBAACiB,EAAA,EAAD,CAAY9B,QAlBL,WACXQ,GACAE,EAAQF,GACRI,EAAS,KAETE,GAAS,IAa4BR,MAAO,WACpC,kBAAC,IAAD,UC1CPyB,EAAgD,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAKC,EAAiB,EAAjBA,YAChE,EAAgCtB,oBAAkB,GAAlD,mBAAKuB,EAAL,KAAgBC,EAAhB,KACA,EAAwBxB,mBAAiBqB,GAAzC,mBAAKxB,EAAL,KAAYI,EAAZ,KAuBA,OACI,oCACKsB,EACG,kBAAChB,EAAA,EAAD,CAAYkB,KAAK,OACLjB,MAAOX,EACP6B,OAjBJ,WAChBF,GAAa,GACbF,EAAYzB,IAgBQ8B,WAAW,EACXlB,SA3BG,SAACC,GACxBT,EAASS,EAAEE,cAAcJ,QA2BLO,WAfD,SAACL,GACN,UAAVA,EAAEM,KAAmBnB,IACrB2B,GAAa,GACbF,EAAYzB,OAsBN,0BAAM+B,cAlCD,WACfJ,GAAa,KAiC+BH,K,2DCnB9CQ,EAA+B,GAqDxBC,EAAY,SAACC,EAAmBC,GACzC,MAAO,CAACP,KAAM,WAAY5B,MAAOkC,EAAWC,WAAYA,IAE/CC,EAAe,SAACC,EAAuBF,GAChD,MAAO,CAACP,KAAM,cAAeU,GAAID,EAAeF,WAAYA,IAEnDI,EAAoB,SAACC,EAA4BC,EAAsBN,GAChF,MAAO,CAACP,KAAM,oBAAqBU,GAAIE,EAAoBxC,MAAOyC,EAAcN,WAAYA,IAEnFO,EAAmB,SAACC,EAAwBC,EAAgBT,GACrE,MAAO,CAACP,KAAM,kBAAmBU,GAAIM,EAAQC,SAAUF,EAAeR,WAAYA,IC7D/E,SAASW,EAASxD,GACrB,IAAMyD,EAAWC,cACXC,EAAQC,aAA2C,SAACC,GAAD,OAAUA,EAAMF,MAAM3D,EAAM6C,eAiB/EiB,EAAkB,SAACrD,GAAD,OAAuBT,EAAM+D,eAAetD,EAAQT,EAAM6C,aAI9EmB,EAAgBL,EAQpB,MAPqB,WAAjB3D,EAAMS,SACNuD,EAAgBL,EAAMlD,QAAO,SAAAwD,GAAC,OAAKA,EAAEC,WAEpB,cAAjBlE,EAAMS,SACNuD,EAAgBL,EAAMlD,QAAO,SAAAwD,GAAC,OAAIA,EAAEC,WAGjC,6BACH,4BAAI,kBAAC,EAAD,CAAchC,KAAMlC,EAAMU,MAAOyB,YAVhB,SAACzB,GAAD,OAAiBV,EAAMmE,oBAAoBzD,EAAOV,EAAM6C,eAWzE,kBAACb,EAAA,EAAD,CAAYzB,KAAM,SAAWL,QAfb,kBAAKF,EAAMoE,eAAepE,EAAM6C,aAeOxC,MAAO,CAACgE,QAAQ,MAAMC,SAAS,SAClF,kBAACC,EAAA,EAAD,QAIR,kBAAC,EAAD,CAAc3D,QAlBC,SAACF,GAAD,OAAiB+C,EAASd,EAAUjC,EAAOV,EAAM6C,gBAoBhE,wBAAIxC,MAAO,CAACmE,UAAU,OAAQH,QAAQ,MAEjCL,EAAcS,KAAI,SAACC,GAChB,IAQIC,EAAeD,EAAOR,OAASjD,IAAEiD,OAAS,GAE9C,OACI,wBAAIrC,IAAK6C,EAAO1B,GAAI4B,UAAWD,GAC3B,kBAAC3C,EAAA,EAAD,CAAYzB,KAAM,QAAUL,QAZhB,kBAAKuD,EAASX,EAAa4B,EAAO1B,GAAGhD,EAAM6C,eAanD,kBAAC0B,EAAA,EAAD,OAEJ,kBAACM,EAAA,EAAD,CAAUC,QAASJ,EAAOR,OAAQ5C,SAbrB,SAACC,GAClBkC,EAASL,EAAiB7B,EAAEE,cAAcqD,QAASJ,EAAO1B,GAAIhD,EAAM6C,cAYNtC,KAAM,QAASC,MAAO,YAEhF,kBAAC,EAAD,CAAc0B,KAAMwC,EAAOhE,MAAOyB,YAXtB,SAACzB,GAAD,OAAkB+C,EAASR,EAAkByB,EAAO1B,GAAItC,EAAOV,EAAM6C,qBAiBjG,6BACI,kBAAC,EAAD,CAAW1C,SAAU,kBAAK2D,EAAgB,QAAQpD,MAAO,MAAOD,OAAQT,EAAMS,SAC9E,kBAAC,EAAD,CAAWN,SAAU,kBAAK2D,EAAgB,WAAWpD,MAAO,SAAUD,OAAQT,EAAMS,SACpF,kBAAC,EAAD,CAAWN,SAAU,kBAAK2D,EAAgB,cAAcpD,MAAO,YAAaD,OAAQT,EAAMS,W,kECxEhGiC,GANqBqC,cACAA,cAKe,ICJnC,SAASC,IACZ,IAAMvB,EAAWC,cACXuB,EAAYrB,aAA+C,SAACC,GAAD,OAASA,EAAMoB,aAK1ElB,EAAiB,SAAC1C,EAAmBwB,GACvCY,EDuBG,CAACnB,KAAK,yBAA0B7B,OCvBHY,EDuB6B2B,GCvBtBH,KAGrCsB,EAAsB,SAACzD,EAAcmC,GACvCY,EDgBG,CAACnB,KAAK,wBAAyB5B,MChBHA,EDgB2BsC,GChBpBH,KAGpCuB,EAAiB,SAACvB,GACpB,IAAMqC,EDSH,CAAC5C,KAAK,kBAAmBU,GCTIH,GAChCY,EAASyB,IAMb,OACI,yBAAKN,UAAU,OACX,kBAACO,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAAShF,MAAO,CAACiF,eAAgB,kBAC7B,kBAACtD,EAAA,EAAD,CAAYuD,KAAK,QAAQ/E,MAAM,UAAUgF,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYtF,QAAQ,MAApB,aAGA,kBAACH,EAAA,EAAD,CACIG,QAAS,WACTI,MAAM,WAFV,WAQR,kBAACmF,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACzF,MAAO,CAACgE,QAAQ,SAAUiB,eAAgB,WACtD,kBAAC,EAAD,CAAa1E,QAxBT,SAACF,GACjB,IAAMwE,EDEH,CAAC5C,KAAK,eAAgB5B,MCFIA,EDEoBqF,WAAWhB,eCD5DtB,EAASyB,OAwBD,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GACpBf,EAAUR,KAAI,SAAAwB,GAEX,OAAO,kBAACJ,EAAA,EAAD,CAAMK,MAAI,GACb,kBAACC,EAAA,EAAD,CAAOC,UAAW,GAAI/F,MAAO,CAACgE,QAAQ,SAClC,kBAACb,EAAD,CACI3B,IAAKoE,EAAEjD,GACPH,WAAYoD,EAAEjD,GACdtC,MAAOuF,EAAEvF,MAGTqD,eAAgBA,EAGhBtD,OAAQwF,EAAExF,OACV2D,eAAgBA,EAEhBD,oBAAqBA,Y,YCpFnDkC,EAAcC,YAAgB,CAChCrB,UF0B4B,WAAsF,IAArFpB,EAAoF,uDAAxDnB,EAAcwC,EAA0C,uCACjH,OAAOA,EAAO5C,MACV,IAAK,eACD,MAAM,CAAE,CAACU,GAAGkC,EAAOa,WAAYrF,MAAMwE,EAAOxE,MAAOD,OAAO,QAA1D,mBAAqEoD,IACzE,IAAK,kBACD,OAAOA,EAAMpD,QAAO,SAAA8F,GAAE,OAAIA,EAAGvD,KAAOkC,EAAOlC,MAC/C,IAAK,wBACD,OAAOa,EAAMY,KAAI,SAAA8B,GAAE,OAAIA,EAAGvD,KAAOkC,EAAOlC,GAAjB,2BAA0BuD,GAA1B,IAA6B7F,MAAMwE,EAAOxE,QAAS6F,KAC9E,IAAK,yBACD,OAAO1C,EAAMY,KAAI,SAAA+B,GAAE,OAAGA,EAAGxD,KAAOkC,EAAOlC,GAAjB,2BAA0BwD,GAA1B,IAA6B/F,OAAOyE,EAAOzE,SAAU+F,KAC/E,QACI,OAAO3C,IEpCfF,MJsCwB,WAA6E,IAA5EE,EAA2E,uDAApDnB,EAAcwC,EAAsC,uCACpG,OAAQA,EAAO5C,MACX,IAAK,WACD,OAAO,2BACAuB,GADP,kBAEKqB,EAAOrC,WAFZ,CAE0B,CAACG,GAAI+B,cAAMrE,MAAOwE,EAAOxE,MAAOwD,QAAQ,IAFlE,mBAE6EL,EAAMqB,EAAOrC,gBAE9F,IAAK,cACD,OAAO,2BAAIgB,GAAX,kBAAmBqB,EAAOrC,WAAagB,EAAMqB,EAAOrC,YAAYpC,QAAO,SAAAgG,GAAI,OAAIA,EAAKzD,KAAOkC,EAAOlC,QACtG,IAAK,oBACD,OAAO,2BACAa,GADP,kBAEKqB,EAAOrC,WAAagB,EAAMqB,EAAOrC,YAAY4B,KAAI,SAAAgC,GAAI,OAAIA,EAAKzD,KAAOkC,EAAOlC,GAAnB,2BACnDyD,GADmD,IAEtD/F,MAAOwE,EAAOxE,QACd+F,OAEZ,IAAK,kBACD,OAAO,2BACA5C,GADP,kBAEKqB,EAAOrC,WAAagB,EAAMqB,EAAOrC,YAAY4B,KAAI,SAAAgC,GAAI,OAAIA,EAAKzD,KAAOkC,EAAOlC,GAAnB,2BACnDyD,GADmD,IAEtDvC,OAAQgB,EAAO3B,WACfkD,OAEZ,IAAK,eACD,OAAO,2BACA5C,GADP,kBAEKqB,EAAOa,WAAY,KAE5B,IAAK,kBACD,IAAMW,EAAQ,eAAO7C,GAErB,cADO6C,EAASxB,EAAOlC,IAChB0D,EACX,QACI,OAAO7C,MItEN8C,EAAQC,YAAYP,GAGjC1G,OAAOgH,MAAQA,ECJfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACjB,kBAAC3B,EAAD,OAEC+B,SAASC,eAAe,ST8HvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxG,GACLyG,QAAQzG,MAAMA,EAAM0G,c","file":"static/js/main.289d0e23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"App_errorInput__dcfmk\",\"nonErrorInput\":\"App_nonErrorInput__35KCE\",\"errorMessage\":\"App_errorMessage__3h7_G\",\"activeFilter\":\"App_activeFilter__18OwP\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype NewButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    filter?:string\r\n}\r\n\r\nexport const NewButton = (props:NewButtonPropsType) => {\r\n    // let classButton = props.filter === props.title ? \"secondary\" : \"primary\"\r\n    return (\r\n      <Button  onClick={props.callback} variant={'contained'} style={{margin:'0 5px 0 0'}}\r\n               size={'small'} color={props.filter === props.title ? \"secondary\" : \"primary\"}>\r\n          {props.title}\r\n      </Button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from '../App.module.css'\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\n\r\nexport type InputType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\nexport const AddItemForm: React.FC<InputType> = ({ addItem}) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState(false)\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = e.currentTarget.value\r\n        if (!currentValue.trim()) {\r\n            setError(true)\r\n            setTitle('')\r\n        } else {\r\n            setTitle(currentValue)\r\n            setError(false)\r\n        }\r\n    }\r\n    const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const addHandler = () => {\r\n        if (title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const inputClasses = error ? s.errorInput : s.nonErrorInput\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField value={title} onChange={changeInputValue} size={'small'} label={'Title'}\r\n                           onKeyPress={onKeyHandler} variant={'outlined'} style={{height:'20px'}}\r\n                           helperText={error && 'Type some text'} color={\"primary\"} error={error}>\r\n\r\n                </TextField>\r\n                {/*<input className={inputClasses} value={title} onChange={changeInputValue} onKeyPress={onKeyHandler}/>*/}\r\n                <IconButton onClick={addHandler} color={'primary'}>\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </div>\r\n            {/*<div className={s.errorMessage}>{error}</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    name: string\r\n    changeTitle: (title:string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = ({name,changeTitle}) => {\r\n    let [condition, setCondition] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(name)\r\n\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setCondition(true)\r\n        // setTitle(name)\r\n    }\r\n    const offEditMode = () => {\r\n        setCondition(false)\r\n        changeTitle(title)\r\n    }\r\n\r\n    const keyModeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            setCondition(false)\r\n            changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {condition ?\r\n                <TextField  type=\"text\"\r\n                            value={title}\r\n                            onBlur={offEditMode}\r\n                            autoFocus={true}\r\n                            onChange={changeTitleHandler}\r\n                            onKeyPress={keyModeHandler}>\r\n\r\n                </TextField>\r\n                // <input\r\n                //     type=\"text\"\r\n                //     value={title}\r\n                //     onBlur={offEditMode}\r\n                //     autoFocus={true}\r\n                //     onChange={changeTitleHandler}\r\n                //     onKeyPress={keyModeHandler}/>\r\n                : <span onDoubleClick={onEditMode}>{name}</span>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n","import {TaskStateType} from \"../AppWithReducers\";\r\nimport {v1} from \"uuid\";\r\nimport {ActionAddTodolistType, ActionRemoveTodolistType, TodolistID1, TodolistID2} from \"./todolists-reducer\";\r\n//----------------------------------------------------------------------------------\r\n\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    id: string\r\n    title: string\r\n    TodolistID: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    TodolistID: string\r\n}\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    TodolistID: string\r\n}\r\ntype TaskCheckboxActionType = {\r\n    type: 'CHANGE-CHECKBOX'\r\n    checkbox: boolean\r\n    id: string\r\n    TodolistID: string\r\n}\r\n\r\ntype ActionType = ChangeTaskTitleActionType | AddTaskActionType | RemoveTaskActionType | TaskCheckboxActionType\r\n    | ActionAddTodolistType | ActionRemoveTodolistType\r\n//----------------------------------------------------------------------------------------------------\r\n\r\nconst initialState: TaskStateType  = {\r\n    // [TodolistID1]: [\r\n    //     {id: v1(), title: \"Javascript\", isDone: true},\r\n    //     {id: v1(), title: \"Node JS\", isDone: false},\r\n    //     {id: v1(), title: \"React\", isDone: true},\r\n    // ],\r\n    // [TodolistID2]: [\r\n    //     {id: v1(), title: \"HTML\", isDone: false},\r\n    //     {id: v1(), title: \"CSS\", isDone: false},\r\n    //     {id: v1(), title: \"Angular\", isDone: true}\r\n    // ]\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.TodolistID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.TodolistID]]\r\n            }\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.TodolistID]: state[action.TodolistID].filter(task => task.id !== action.id)}\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.TodolistID]: state[action.TodolistID].map(task => task.id === action.id ? {\r\n                    ...task,\r\n                    title: action.title\r\n                } : task)\r\n            }\r\n        case 'CHANGE-CHECKBOX':\r\n            return {\r\n                ...state,\r\n                [action.TodolistID]: state[action.TodolistID].map(task => task.id === action.id ? {\r\n                    ...task,\r\n                    isDone: action.checkbox\r\n                } : task)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]:[]\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            const newTasks = {...state}\r\n            delete newTasks[action.id]\r\n            return newTasks\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//---------------------------------------------------------------------------------------------------------------------------------\r\nexport const addTaskAC = (taskTitle: string, TodolistID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title: taskTitle, TodolistID: TodolistID}\r\n}\r\nexport const removeTaskAC = (removedTaskID: string, TodolistID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', id: removedTaskID, TodolistID: TodolistID}\r\n}\r\nexport const changeTaskTitleAC = (changedTaskTitleID: string, newTaskTitle: string, TodolistID: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', id: changedTaskTitleID, title: newTaskTitle, TodolistID: TodolistID}\r\n}\r\nexport const changeCheckboxAC = (checkboxState: boolean, TaskID: string, TodolistID: string): TaskCheckboxActionType => {\r\n    return {type: 'CHANGE-CHECKBOX', id: TaskID, checkbox: checkboxState, TodolistID: TodolistID}\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {TaskStateType, typeFilter} from \"./AppWithReducers\";\r\nimport {NewButton} from \"./Components/NewButton\";\r\nimport s from'./App.module.css'\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {EditableSpan} from \"./Components/EditableSpan\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {addTaskAC, changeCheckboxAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    // tasks: Array<TaskType>\r\n    // removeTask: (id:string, TodolistID:string) => void\r\n    changeTodolist: (filter:typeFilter, TodolistID: string) =>void\r\n    // addTask: (title:string, TodolistID:string) => void\r\n    // changeCheckbox:(checkbox:boolean, id:string, TodolistID:string) => void\r\n    removeTodolist: (TodolistID:string) =>void\r\n    // changeTaskTitle: (id: string, title:string,  TodolistID: string) => void\r\n    changeTodolistTitle:(title:string, TodolistID: string)=>void\r\n    filter:typeFilter\r\n    TodolistID:string\r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootState, Array<TaskType>>((state)=> state.tasks[props.TodolistID])\r\n    //берем таски для конкретного тудулиста\r\n\r\n    const changeCheckbox = (checkbox: boolean, id: string, TodolistID: string) => {\r\n        dispatch(changeCheckboxAC(checkbox, id, TodolistID))\r\n    }\r\n    const changeTaskTitle = (id: string, title:string,  TodolistID: string) => {\r\n        dispatch(changeTaskTitleAC(id, title,  TodolistID))\r\n    }\r\n    const removeTask = (id: string, TodolistID: string) => {\r\n        dispatch(removeTaskAC(id, TodolistID))\r\n    }\r\n    const addTask = (title: string, TodolistID: string) => {\r\n        dispatch(addTaskAC(title, TodolistID))\r\n    }\r\n    //----------------------------------------------------------------------------------------------------\r\n    const todolistRemover = ()=> props.removeTodolist(props.TodolistID)\r\n    const changeTdlButton = (filter:typeFilter) => props.changeTodolist(filter, props.TodolistID)\r\n    const newAddTask = (title:string)=> dispatch(addTaskAC(title, props.TodolistID))\r\n    // const newAddTask = (title:string)=> props.addTask(title, props.TodolistID)\r\n    const newTodolistTitle = (title:string)=> props.changeTodolistTitle(title, props.TodolistID)\r\n    let filteredTasks = tasks\r\n    if (props.filter === 'Active') {\r\n        filteredTasks = tasks.filter(f => !f.isDone)\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        filteredTasks = tasks.filter(f => f.isDone)\r\n    }\r\n//-----------------------------------------------------------------------------------------------------------------\r\n    return <div>\r\n        <h3><EditableSpan name={props.title} changeTitle={newTodolistTitle}/>\r\n            <IconButton size={'medium'}  onClick={todolistRemover} style={{padding:\"5px\",fontSize:\"1rem\"}}>\r\n                <Delete/>\r\n            </IconButton>\r\n            {/*<NewButton callback={todolistRemover} title={'X'}/>*/}\r\n        </h3>\r\n        <AddItemForm  addItem={newAddTask} />\r\n\r\n        <ul style={{listStyle:\"none\", padding:\"0\"}}>\r\n\r\n            {filteredTasks.map((mTasks) => {\r\n                const taskRemover = ()=> dispatch(removeTaskAC(mTasks.id,props.TodolistID))\r\n                // const taskRemover = ()=> props.removeTask(mTasks.id,props.TodolistID)\r\n                const checkHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n                    dispatch(changeCheckboxAC(e.currentTarget.checked, mTasks.id, props.TodolistID))\r\n                    // props.changeCheckbox(e.currentTarget.checked, mTasks.id, props.TodolistID )\r\n                }\r\n                const changeTitle = (title:string) => dispatch(changeTaskTitleAC(mTasks.id, title, props.TodolistID))\r\n                // const changeTitle = (title:string) => props.changeTaskTitle(mTasks.id, title, props.TodolistID)\r\n                let inputChecked = mTasks.isDone ? s.isDone : ''\r\n\r\n                return (\r\n                    <li key={mTasks.id} className={inputChecked} >\r\n                        <IconButton size={'small'}  onClick={taskRemover}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                        <Checkbox checked={mTasks.isDone} onChange={checkHandler} size={'small'} color={'primary'}/>\r\n                        {/*<input  type=\"checkbox\" checked={mTasks.isDone} onChange={checkHandler}/>*/}\r\n                        <EditableSpan name={mTasks.title} changeTitle={changeTitle}/>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n\r\n        <div>\r\n            <NewButton callback={()=> changeTdlButton('All')} title={'All'} filter={props.filter}/>\r\n            <NewButton callback={()=> changeTdlButton('Active')} title={'Active'} filter={props.filter}/>\r\n            <NewButton callback={()=> changeTdlButton('Completed')} title={'Completed'} filter={props.filter}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import {TodolistType, typeFilter} from \"../AppWithReducers\";\r\nimport {v1} from \"uuid\";\r\n//--------------------------------------------------------------\r\nexport type ActionAddTodolistType = {\r\n    type:'ADD-TODOLIST'\r\n    title:string\r\n    todolistId:string\r\n}\r\nexport type ActionRemoveTodolistType = {\r\n    type:'REMOVE-TODOLIST'\r\n    id:string\r\n}\r\nexport type ActionChangeTodolistTitleType = {\r\n    type:'CHANGE-TODOLIST-TITLE'\r\n    id:string\r\n    title:string\r\n}\r\nexport type ActionChangeTodolistType = {\r\n    type:'CHANGE-TODOLIST-FILTER'\r\n    filter:typeFilter\r\n    id:string\r\n}\r\n\r\ntype ActionType = ActionAddTodolistType | ActionRemoveTodolistType | ActionChangeTodolistTitleType | ActionChangeTodolistType\r\n//---------------------------------------------------------------------------------\r\nexport const TodolistID1 = v1()\r\nexport const TodolistID2 = v1()\r\n// const initialState:Array<TodolistType>  = [\r\n//     {id: TodolistID1, title: 'What to learn', filter: 'All'},\r\n//     {id: TodolistID2, title: 'What to learn Extra', filter: 'All'}\r\n// ]\r\nconst initialState:Array<TodolistType>  = []\r\nexport const todolistsReducer = (state:Array<TodolistType> = initialState, action:ActionType):Array<TodolistType> => {\r\n    switch(action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [{id:action.todolistId, title:action.title, filter:'All'}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl,title:action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(td=> td.id === action.id ? {...td,filter:action.filter} : td)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//----------------------------------------------------------------------\r\nexport const addTodolistAC = (newTodolistTitle:string):ActionAddTodolistType => {\r\n    return {type:'ADD-TODOLIST', title:newTodolistTitle, todolistId:v1()}\r\n}\r\nexport const removeTodolistAC = (todolistId:string):ActionRemoveTodolistType => {\r\n    return {type:'REMOVE-TODOLIST', id:todolistId}\r\n}\r\nexport const changeTodolistTitleAC = (newTodolistTitle:string,todolistId:string,):ActionChangeTodolistTitleType => {\r\n    return {type:'CHANGE-TODOLIST-TITLE', title:newTodolistTitle, id:todolistId}\r\n}\r\nexport const changeTodolistFilterAC = (newTodolistFilter:typeFilter,todolistId:string):ActionChangeTodolistType => {\r\n    return {type:'CHANGE-TODOLIST-FILTER', filter:newTodolistFilter, id:todolistId}\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeCheckboxAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n//-----------------------------------------------------------------------------------------\r\nexport type typeFilter = 'All' | 'Active' | 'Completed'\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: typeFilter\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------\r\nexport function AppWithReducers() {\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootState, Array<TodolistType>>((state)=>state.todolists)\r\n\r\n\r\n\r\n\r\n    const changeTodolist = (value: typeFilter, TodolistID: string) => {\r\n        dispatch(changeTodolistFilterAC(value, TodolistID))\r\n\r\n    }\r\n    const changeTodolistTitle = (title:string, TodolistID: string) => {\r\n        dispatch(changeTodolistTitleAC(title, TodolistID))\r\n\r\n    }\r\n    const removeTodolist = (TodolistID: string) => {\r\n        const action = removeTodolistAC(TodolistID)\r\n        dispatch(action)\r\n    }\r\n    const addTodoList = (title: string) =>{\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding:\"15px 0\", justifyContent: \"center\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    {todolists.map(t => {\r\n\r\n                        return <Grid item>\r\n                            <Paper elevation={10} style={{padding:\"15px\"}}>\r\n                                <Todolist\r\n                                    key={t.id}\r\n                                    TodolistID={t.id}\r\n                                    title={t.title}\r\n                                    // tasks={filteredTasks}\r\n                                    // removeTask={removeTask}\r\n                                    changeTodolist={changeTodolist}\r\n                                    // addTask={addTask}\r\n                                    // changeCheckbox={changeCheckbox}\r\n                                    filter={t.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    // changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists:todolistsReducer,\r\n    tasks:tasksReducer\r\n})\r\nexport type  AppRootState = ReturnType<typeof rootReducer> // автоматически определяем тип общего стейта\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithReducers} from \"./AppWithReducers\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithReducers/>\r\n    </Provider>\r\n    ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}