{"version":3,"sources":["serviceWorker.ts","api/task-api.ts","Components/NewButton.tsx","Components/AddItemForm.tsx","Components/EditableSpan.tsx","state/tasks-reducer.ts","Components/Task.tsx","Todolist.tsx","api/todolist-api.ts","state/todolists-reducer.ts","AppWithReducers.tsx","state/store.tsx","index.tsx","App.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","NewButton","React","memo","props","Button","onClick","callback","variant","style","margin","size","color","filter","title","AddItemForm","addItem","useState","setTitle","error","setError","TextField","value","onChange","e","currentValue","currentTarget","trim","label","onKeyPress","key","height","helperText","IconButton","EditableSpan","name","changeTitle","condition","setCondition","type","onBlur","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","TaskAPI","todolistID","get","post","taskID","model","put","delete","initialState","updateTaskTC","dispatch","getState","task","tasks","find","ts","id","newModel","description","status","priority","startDate","deadline","then","res","updateTaskAC","Task","TaskID","TodolistID","useDispatch","useSelector","state","taskRemover","useCallback","deleteTaskAC","inputChecked","Completed","s","isDone","className","Delete","Checkbox","checked","New","Todolist","useEffect","data","items","todolistRemover","removeTodolist","changeTdlButton","changeTodolist","newAddTask","item","addTaskTC","newTodolistTitle","changeTodolistTitle","filteredTasks","f","padding","fontSize","listStyle","map","mTasks","TodoListAPI","todolistId","v1","AppWithReducers","todolist","todolists","changeTodolistTitleAC","updateTodosTitleTC","removeTodolistAC","addTodoList","todo","addTodosTC","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","spacing","t","Paper","elevation","rootReducer","combineReducers","action","tl","td","copyTasks","forEach","todoListId","newTasks","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.84d2453d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL:'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials:true,\r\n    headers: {\r\n        'API-KEY': 'b8b0c036-4edd-4913-8c7f-79ccaeace603'\r\n    }\r\n})\r\nexport const TaskAPI = {\r\n    getTsk(todolistID:string){\r\n        return instance.get<GetTaskType>(`todo-lists/${todolistID}/tasks`)\r\n    },\r\n    createTsk(todolistID:string,title:string){\r\n        return instance.post<CommonTaskType<{item:TaskObjectType}>>(`todo-lists/${todolistID}/tasks`,{title})\r\n    },\r\n    updateTsk(todolistID:string,taskID:string,model:UpdateTasksModelType){\r\n        return instance.put<CommonTaskType<{item:TaskObjectType}>>(`todo-lists/${todolistID}/tasks/${taskID}`,model)\r\n    },\r\n    deleteTsk(taskID:string, todolistID:string){\r\n        return instance.delete<CommonTaskType>(`todo-lists/${todolistID}/tasks/${taskID}`)\r\n    },\r\n}\r\n\r\n\r\nexport type UpdateTasksModelType ={\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTaskType={\r\n    items:Array<TaskObjectType>\r\n    totalCount:number\r\n    error: string\r\n}\r\nexport type TaskObjectType={\r\n    description: string\r\n    title: string\r\n    // completed: boolean\r\n    status: TaskStatuses\r\n    priority:TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: Date\r\n}\r\ntype CommonTaskType<T={}>={\r\n    data:T\r\n    resultCode:number\r\n    messages: Array<string>\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype NewButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    filter?:string\r\n}\r\n\r\nexport const NewButton = React.memo((props:NewButtonPropsType) => {\r\n    // console.log('Show Button')\r\n    // let classButton = props.filter === props.title ? \"secondary\" : \"primary\"\r\n    return (\r\n      <Button  onClick={props.callback} variant={'contained'} style={{margin:'0 5px 0 0'}}\r\n               size={'small'} color={props.filter === props.title ? \"secondary\" : \"primary\"}>\r\n          {props.title}\r\n      </Button>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\nexport type InputType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\nexport const AddItemForm: React.FC<InputType> = React.memo(({ addItem}) => {\r\n    // console.log('AddItemForm')\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState(false)\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = e.currentTarget.value\r\n        if (!currentValue.trim()) {\r\n            setError(true)\r\n            // setTitle('')\r\n        } else {\r\n            setTitle(currentValue)\r\n            setError(false)\r\n        }\r\n    }\r\n    const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        }\r\n    }\r\n    const addHandler = () => {\r\n        if (title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField value={title} onChange={changeInputValue} size={'small'} label={'Title'}\r\n                           onKeyPress={onKeyHandler} variant={'outlined'} style={{height:'20px'}}\r\n                           helperText={error && 'Type some text'} color={\"primary\"} error={error}>\r\n                </TextField>\r\n\r\n                <IconButton onClick={addHandler} color={'primary'}>\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    name: string\r\n    changeTitle: (title:string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(({name,changeTitle}) => {\r\n    let [condition, setCondition] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(name)\r\n\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setCondition(true)\r\n        // setTitle(name)\r\n    }\r\n    const offEditMode = () => {\r\n        setCondition(false)\r\n        changeTitle(title)\r\n    }\r\n\r\n    const keyModeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            setCondition(false)\r\n            changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {condition ?\r\n                <TextField  type=\"text\"\r\n                            value={title}\r\n                            onBlur={offEditMode}\r\n                            autoFocus={true}\r\n                            onChange={changeTitleHandler}\r\n                            onKeyPress={keyModeHandler}>\r\n\r\n                </TextField>\r\n                : <span onDoubleClick={onEditMode}>{name}</span>\r\n            }\r\n        </>\r\n    );\r\n});\r\n\r\n","import {TaskStateType} from \"../AppWithReducers\";\r\nimport {\r\n    ActionAddTodolistType,\r\n    ActionGetTodolistType,\r\n    ActionRemoveTodolistType,\r\n} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskAPI, TaskObjectType, TaskPriorities, TaskStatuses, UpdateTasksModelType} from \"../api/task-api\";\r\nimport {AppRootState} from \"./store\";\r\n\r\n//----------------------------------------------------------------------------------\r\n\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>;\r\nexport type DeleteTaskActionType = ReturnType<typeof deleteTaskAC>;\r\nexport type UpdateTaskActionType = ReturnType<typeof updateTaskAC>;\r\nexport type GetTasksActionType = ReturnType<typeof getTaskAC>;\r\n\r\ntype ActionType = AddTaskActionType | DeleteTaskActionType | UpdateTaskActionType\r\n    | ActionAddTodolistType | ActionRemoveTodolistType | ActionGetTodolistType | GetTasksActionType\r\n//----------------------------------------------------------------------------------------------------\r\n\r\nconst initialState: TaskStateType = {\r\n    // [TodolistID1]: [\r\n    //     {id: v1(), title: \"Javascript\", isDone: true},\r\n    //     {id: v1(), title: \"Node JS\", isDone: false},\r\n    //     {id: v1(), title: \"React\", isDone: true},\r\n    // ],\r\n    // [TodolistID2]: [\r\n    //     {id: v1(), title: \"HTML\", isDone: false},\r\n    //     {id: v1(), title: \"CSS\", isDone: false},\r\n    //     {id: v1(), title: \"Angular\", isDone: true}\r\n    // ]\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"GET-TASKS\":\r\n            return {...state, [action.TodolistID]: action.tasks}\r\n\r\n        case \"GET-TODOS\":\r\n            // debugger\r\n            let copyTasks = {...state};\r\n            action.todolist.forEach((tl) => {\r\n                copyTasks[tl.id] = []\r\n            });\r\n            return copyTasks;\r\n\r\n        case 'ADD-TASK':\r\n            debugger\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case 'DELETE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(task => task.id !== action.taskID)}\r\n\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(task => task.id === action.taskID ? {\r\n                    ...task,\r\n                    ...action.model\r\n                } : task)\r\n            }\r\n        // case 'UPDATE-TASK':\r\n        //     return {\r\n        //         ...state,\r\n        //         [action.task.todoListId]: state[action.task.todoListId].map(ts => ts.id === action.task.id ? {\r\n        //             ...ts,\r\n        //             ...action.task\r\n        //         } : ts)\r\n        //     }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todo.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            const newTasks = {...state}\r\n            delete newTasks[action.todolistId]\r\n            return newTasks\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//---------------------------------------------------------------------------------------------------------------------------------\r\nexport const getTaskAC = (TodolistID: string, tasks: Array<TaskObjectType>) => {\r\n    return {type: 'GET-TASKS', TodolistID, tasks} as const\r\n}\r\nexport const addTaskAC = (task: TaskObjectType) => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const deleteTaskAC = (taskID: string, todolistID: string) => {\r\n    return {type: 'DELETE-TASK', taskID, todolistID} as const\r\n}\r\n// export const changeTaskTitleAC = (task: TaskObjectType) => {\r\n//     return {type: 'CHANGE-TASK-TITLE', task} as const\r\n// }\r\nexport const updateTaskAC = (todolistID: string, taskID: string, model:UpdateDomainTasksModelType) => {\r\n    return {type: 'UPDATE-TASK', todolistID, taskID, model} as const\r\n}\r\n// export const updateTaskAC = (task: TaskObjectType) => {\r\n//     return {type: 'UPDATE-TASK', task} as const\r\n// }\r\n//------------------------------------------------------------------------------------------\r\nexport const getTaskTC = (todolistID: string) => (dispatch: Dispatch) => {\r\n    // debugger\r\n    TaskAPI.getTsk(todolistID)\r\n        .then((res) => {\r\n            dispatch(getTaskAC(todolistID, res.data.items))\r\n        })\r\n}\r\nexport const deleteTaskTC = (taskID: string, todolistID: string) => (dispatch: Dispatch) => {\r\n    TaskAPI.deleteTsk(taskID, todolistID)\r\n        .then((res) => {\r\n            dispatch(deleteTaskAC(taskID, todolistID))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string) => (dispatch: Dispatch) => {\r\n    TaskAPI.createTsk(todolistID, title)\r\n        .then((res) => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport type UpdateDomainTasksModelType ={\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (todolistID: string, taskID: string, model:UpdateDomainTasksModelType) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootState) => {\r\n        let allTasks = getState().tasks;\r\n        let task = allTasks[todolistID].find(ts => ts.id === taskID)\r\n        if (task) {\r\n            let newModel:UpdateTasksModelType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...model,\r\n            }\r\n            TaskAPI.updateTsk(todolistID, taskID, newModel)\r\n                .then((res) => {\r\n                    dispatch(updateTaskAC(todolistID, taskID, model))\r\n                    // dispatch(updateTaskAC(res.data.data.item))\r\n                })\r\n        }\r\n    }\r\n\r\n}","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {deleteTaskTC, updateTaskTC} from \"../state/tasks-reducer\";\r\nimport s from \"../App.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../state/store\";\r\nimport {TaskObjectType, TaskStatuses} from \"../api/task-api\";\r\n\r\nexport type SingleTaskType ={\r\n    TaskID:string\r\n    TodolistID:string\r\n}\r\n\r\nexport const Task: React.FC<SingleTaskType> = React.memo(({TaskID, TodolistID}) => {\r\n    // console.log('Task Render')\r\n    const dispatch = useDispatch()\r\n    const task = useSelector<AppRootState, TaskObjectType>(state => {\r\n       return  state.tasks[TodolistID].filter((ts) => ts.id === TaskID)[0]\r\n    })\r\n    const taskRemover = useCallback(()=> dispatch(deleteTaskTC(TaskID,TodolistID)), [])\r\n    const checkHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        let checkedData = e.currentTarget.checked;\r\n        let status = checkedData ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskTC(TodolistID, TaskID,{status}))\r\n    }\r\n    const changeTitle = useCallback((title:string) => dispatch(updateTaskTC(TodolistID, TaskID, {title})),[])\r\n    let inputChecked = task.status === TaskStatuses.Completed ? s.isDone : ''\r\n    return (\r\n        <>\r\n            <li key={task.id} className={inputChecked}>\r\n                <IconButton size={'small'} onClick={taskRemover}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                <Checkbox checked={task.status===TaskStatuses.Completed} onChange={checkHandler} size={'small'} color={'primary'}/>\r\n                <EditableSpan name={task.title} changeTitle={changeTitle}/>\r\n            </li>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default Task;","import React, {useCallback, useEffect} from 'react';\r\nimport {NewButton} from \"./Components/NewButton\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {EditableSpan} from \"./Components/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {addTaskAC, addTaskTC, getTaskTC} from \"./state/tasks-reducer\";\r\nimport Task from \"./Components/Task\";\r\nimport {typeFilter} from \"./state/todolists-reducer\";\r\nimport {TaskObjectType, TaskStatuses} from \"./api/task-api\";\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    changeTodolist: (filter:typeFilter, TodolistID: string) =>void\r\n    removeTodolist: (TodolistID:string) =>void\r\n    changeTodolistTitle:(title:string, TodolistID: string)=>void\r\n    filter:typeFilter\r\n    TodolistID:string\r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootState, Array<TaskObjectType>>((state)=> state.tasks[props.TodolistID])\r\n    //берем таски для конкретного тудулиста\r\n\r\n    useEffect(()=>{\r\n        dispatch(getTaskTC(props.TodolistID))\r\n    },[])\r\n\r\n//-----------------------------------------------------------------------------------------------------------------------\r\n    const todolistRemover = useCallback(()=> props.removeTodolist(props.TodolistID),[props.removeTodolist, props.TodolistID])\r\n    const changeTdlButton = useCallback((filter:typeFilter) => props.changeTodolist(filter, props.TodolistID), [props.changeTodolist,props.TodolistID])\r\n    const newAddTask = useCallback((title:string)=> dispatch(addTaskTC(props.TodolistID,title)),[dispatch])\r\n    const newTodolistTitle = useCallback((title:string)=> props.changeTodolistTitle(title, props.TodolistID),[props.changeTodolistTitle, props.TodolistID])\r\n\r\n    let filteredTasks = tasks\r\n    if (props.filter === 'Active') {\r\n        filteredTasks = tasks.filter(f => f.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        filteredTasks = tasks.filter(f => f.status === TaskStatuses.Completed)\r\n    }\r\n//-----------------------------------------------------------------------------------------------------------------\r\n    return <div>\r\n        <h3><EditableSpan name={props.title} changeTitle={newTodolistTitle}/>\r\n            <IconButton size={'medium'}  onClick={todolistRemover} style={{padding:\"5px\",fontSize:\"1rem\"}}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm  addItem={newAddTask} />\r\n\r\n        <ul style={{listStyle:\"none\", padding:\"0\"}}>\r\n\r\n            {filteredTasks.map((mTasks) => {\r\n                return <Task key={mTasks.id} TaskID={mTasks.id} TodolistID={props.TodolistID}/>\r\n            })}\r\n        </ul>\r\n\r\n        <div>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('All'),[changeTdlButton])} title={'All'} filter={props.filter}/>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('Active'),[changeTdlButton])} title={'Active'} filter={props.filter}/>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('Completed'),[changeTdlButton])} title={'Completed'} filter={props.filter}/>\r\n        </div>\r\n    </div>\r\n})\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials:true,\r\n    headers: {\r\n        'API-KEY': 'b8b0c036-4edd-4913-8c7f-79ccaeace603'\r\n    },\r\n})\r\n\r\n\r\ntype Created = { item: TodolistType };//Alt-Ctrl-V\r\n\r\nexport const TodoListAPI = {\r\n    getTodos(){\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodos(title:string){\r\n        return instance.post<CommonTodosType<Created>>('todo-lists',{title})\r\n    },\r\n    updateTodos(title:string, todolistId:string){\r\n        return instance.put<CommonTodosType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodos(todolistId:string){\r\n        return instance.delete<CommonTodosType>(`todo-lists/${todolistId}`)\r\n    },\r\n}\r\n\r\nexport type TodolistType={\r\n    id:string\r\n    addedDate?:string\r\n    order?:string\r\n    title:string\r\n}\r\ntype CommonTodosType<T={}> ={\r\n    resultCode: number\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    data: T\r\n}","\r\nimport {v1} from \"uuid\";\r\nimport {AppRootState} from \"./store\";\r\nimport {TodoListAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n//--------------------------------------------------------------\r\nexport type ActionAddTodolistType = ReturnType<typeof addTodolistAC>;\r\nexport type ActionRemoveTodolistType = ReturnType<typeof removeTodolistAC>;\r\nexport type ActionChangeTodolistTitleType = ReturnType<typeof changeTodolistTitleAC>;\r\nexport type ActionChangeTodolistType = ReturnType<typeof changeTodolistFilterAC>;\r\nexport type ActionGetTodolistType = ReturnType<typeof getTodosAC>;\r\n//----------------------------------------------------------------------------\r\nexport type typeFilter = 'All' | 'Active' | 'Completed'\r\n\r\nexport type TodolistStateType = TodolistType & {\r\n    filter: typeFilter\r\n}\r\n\r\ntype ActionType = ActionAddTodolistType | ActionRemoveTodolistType\r\n    | ActionChangeTodolistTitleType | ActionChangeTodolistType\r\n    | ActionGetTodolistType\r\n//---------------------------------------------------------------------------------\r\nexport const TodolistID1 = v1()\r\nexport const TodolistID2 = v1()\r\n\r\nconst initialState:Array<TodolistStateType>  = []\r\nexport const todolistReducer = (state:Array<TodolistStateType> = initialState, action:ActionType):Array<TodolistStateType> => {\r\n    switch(action.type) {\r\n        case \"GET-TODOS\":\r\n            return action.todolist.map( (tl) => ({...tl,filter:'All'}))\r\n        case 'ADD-TODOLIST':\r\n            // return [{...action.todolist, filter:'All'}, ...state]\r\n            return [{...action.todo,filter:'All'}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl,title:action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(td=> td.id === action.id ? {...td,filter:action.filter} : td)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//----------------------------------------------------------------------\r\nexport const addTodolistAC = (todo:TodolistType) => {\r\n    return {type:'ADD-TODOLIST', todo} as const\r\n}\r\nexport const removeTodolistAC = (todolistId:string) => {\r\n    return {type:'REMOVE-TODOLIST', todolistId} as const\r\n}\r\nexport const changeTodolistTitleAC = (title:string, todolistId:string) => {\r\n    return {type:'CHANGE-TODOLIST-TITLE', title, todolistId} as const\r\n}\r\nexport const changeTodolistFilterAC = (newTodolistFilter:typeFilter,todolistId:string) => {\r\n    return {type:'CHANGE-TODOLIST-FILTER', filter:newTodolistFilter, id:todolistId} as const\r\n}\r\n\r\nexport const getTodosAC = (todolist:Array<TodolistType> ) => {\r\n    return {type:'GET-TODOS', todolist} as const\r\n}\r\n\r\n//------------------------------------------------------------\r\nexport const getTodosTC = () => (dispatch:Dispatch, getState: ()=>AppRootState) =>{\r\n    TodoListAPI.getTodos()\r\n        .then((res)=>{\r\n            // debugger\r\n            dispatch(getTodosAC(res.data))\r\n        })\r\n}\r\nexport const addTodosTC =(title:string)=>(dispatch:Dispatch) => {\r\n    TodoListAPI.createTodos(title)\r\n        .then((res)=> {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\nexport const deleteTodosTC=(todolistId:string)=>(dispatch:Dispatch)=> {\r\n    TodoListAPI.deleteTodos(todolistId)\r\n        .then((res)=> {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\nexport const updateTodosTitleTC=(title:string, todolistId:string)=>(dispatch:Dispatch)=> {\r\n    TodoListAPI.updateTodos(title,todolistId)\r\n        .then((res)=> {\r\n            dispatch(changeTodolistTitleAC(title,todolistId))\r\n        })\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodosTC,\r\n    changeTodolistFilterAC,\r\n    deleteTodosTC,\r\n    getTodosTC,\r\n    TodolistStateType,\r\n    typeFilter,\r\n    updateTodosTitleTC,\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {TaskObjectType} from \"./api/task-api\";\r\n\r\n//-----------------------------------------------------------------------------------------\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskObjectType>\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------\r\nexport function AppWithReducers() {\r\n    useEffect(()=> {\r\n        dispatch(getTodosTC())\r\n    },[])\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootState, Array<TodolistStateType>>((state)=>state.todolists)\r\n\r\n    const changeTodolist = useCallback((value: typeFilter, TodolistID: string) => {\r\n        dispatch(changeTodolistFilterAC(value, TodolistID))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title:string, TodolistID: string) => {\r\n        dispatch(updateTodosTitleTC(title, TodolistID))\r\n    },[dispatch])\r\n    const removeTodolist = useCallback((TodolistID: string) => {\r\n        dispatch(deleteTodosTC(TodolistID))\r\n    },[dispatch])\r\n    const addTodoList = useCallback((title: string) =>{\r\n        dispatch(addTodosTC(title))\r\n    },[dispatch])\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding:\"15px 0\", justifyContent: \"center\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    {todolists.map(t => {\r\n\r\n                        return <Grid item key={t.id}>\r\n                            <Paper elevation={10} style={{padding:\"10px\"}}>\r\n                                <Todolist\r\n                                    key={t.id}\r\n                                    TodolistID={t.id}\r\n                                    title={t.title}\r\n                                    changeTodolist={changeTodolist}\r\n                                    filter={t.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists:todolistReducer,\r\n    tasks:tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootState = ReturnType<typeof rootReducer> // автоматически определяем тип общего стейта\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithReducers} from \"./AppWithReducers\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithReducers/>\r\n    </Provider>\r\n    ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"App_errorInput__dcfmk\",\"nonErrorInput\":\"App_nonErrorInput__35KCE\",\"errorMessage\":\"App_errorMessage__3h7_G\",\"activeFilter\":\"App_activeFilter__18OwP\"};"],"sourceRoot":""}