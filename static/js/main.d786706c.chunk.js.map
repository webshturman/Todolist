{"version":3,"sources":["App.module.css","Components/NewButton.tsx","Components/AddItemForm.tsx","Components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NewButton","props","Button","onClick","callback","variant","style","margin","size","color","filter","title","AddItemForm","addItem","useState","setTitle","error","setError","s","errorInput","nonErrorInput","TextField","value","onChange","e","currentValue","currentTarget","trim","label","onKeyPress","key","height","helperText","IconButton","EditableSpan","name","refreshingTitle","condition","setCondition","type","onBlur","autoFocus","onDoubleClick","Todolist","changeTdlButton","changeTodolist","TodolistID","refreshTodolistTitle","removeTodolist","padding","fontSize","Delete","addTask","listStyle","tasks","map","mTasks","inputChecked","isDone","id","className","removeTask","Checkbox","checked","changeCheckbox","refreshingTaskTitle","App","todolists","setTodolist","v1","setTasks","checkbox","td","t","newTask","tl","copyTasks","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","todolist","spacing","filteredTasks","f","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d786706c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"App_errorInput__dcfmk\",\"nonErrorInput\":\"App_nonErrorInput__35KCE\",\"errorMessage\":\"App_errorMessage__3h7_G\",\"activeFilter\":\"App_activeFilter__18OwP\"};","import React from 'react';\r\nimport s from '../App.module.css'\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype NewButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    filter?:string\r\n}\r\n\r\nexport const NewButton = (props:NewButtonPropsType) => {\r\n    // let classButton = props.filter === props.title ? \"secondary\" : \"primary\"\r\n    return (\r\n      <Button  onClick={props.callback} variant={'contained'} style={{margin:'0 5px 0 0'}}\r\n               size={'small'} color={props.filter === props.title ? \"secondary\" : \"primary\"}>\r\n          {props.title}\r\n      </Button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from '../App.module.css'\r\nimport {NewButton} from \"./NewButton\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add, AddBox, Delete} from \"@material-ui/icons\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\n\r\nexport type InputType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\nexport const AddItemForm: React.FC<InputType> = ({ addItem}) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState(false)\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = e.currentTarget.value\r\n        if (!currentValue.trim()) {\r\n            setError(true)\r\n            setTitle('')\r\n        } else {\r\n            setTitle(currentValue)\r\n            setError(false)\r\n        }\r\n    }\r\n    const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const addHandler = () => {\r\n        if (title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const inputClasses = error ? s.errorInput : s.nonErrorInput\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField value={title} onChange={changeInputValue} size={'small'} label={'Title'}\r\n                           onKeyPress={onKeyHandler} variant={'outlined'} style={{height:'20px'}}\r\n                           helperText={error && 'Type some text'} color={\"primary\"} error={error}>\r\n\r\n                </TextField>\r\n                {/*<input className={inputClasses} value={title} onChange={changeInputValue} onKeyPress={onKeyHandler}/>*/}\r\n                <IconButton onClick={addHandler} color={'primary'}>\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </div>\r\n            {/*<div className={s.errorMessage}>{error}</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    name: string\r\n    refreshingTitle: (title:string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = ({name,refreshingTitle}) => {\r\n    let [condition, setCondition] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(name)\r\n\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setCondition(true)\r\n        // setTitle(name)\r\n    }\r\n    const offEditMode = () => {\r\n        setCondition(false)\r\n        refreshingTitle(title)\r\n    }\r\n\r\n    const keyModeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            setCondition(false)\r\n            refreshingTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {condition ?\r\n                <TextField  type=\"text\"\r\n                            value={title}\r\n                            onBlur={offEditMode}\r\n                            autoFocus={true}\r\n                            onChange={changeTitleHandler}\r\n                            onKeyPress={keyModeHandler}>\r\n\r\n                </TextField>\r\n                // <input\r\n                //     type=\"text\"\r\n                //     value={title}\r\n                //     onBlur={offEditMode}\r\n                //     autoFocus={true}\r\n                //     onChange={changeTitleHandler}\r\n                //     onKeyPress={keyModeHandler}/>\r\n                : <span onDoubleClick={onEditMode}>{name}</span>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TodolistIdType, typeFilter} from \"./App\";\r\nimport {NewButton} from \"./Components/NewButton\";\r\nimport s from'./App.module.css'\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {EditableSpan} from \"./Components/EditableSpan\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id:string, TodolistID:string) => void\r\n    changeTodolist: (filter:typeFilter, TodolistID: string) =>void\r\n    addTask: (title:string, TodolistID:string) => void\r\n    changeCheckbox:(checkbox:boolean, id:string, TodolistID:string) => void\r\n    removeTodolist: (TodolistID:string) =>void\r\n    refreshingTaskTitle: (id: string, title:string,  TodolistID: string) => void\r\n    refreshTodolistTitle:(title:string, TodolistID: string)=>void\r\n    filter:typeFilter\r\n    TodolistID:string\r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const todolistRemover = ()=> props.removeTodolist(props.TodolistID)\r\n    const changeTdlButton = (filter:typeFilter) => props.changeTodolist(filter,props.TodolistID)\r\n    const newAddTask = (title:string)=> props.addTask(title, props.TodolistID)\r\n    const newTodolistTitle = (title:string)=> props.refreshTodolistTitle(title, props.TodolistID)\r\n\r\n//-----------------------------------------------------------------------------------------------------------------\r\n    return <div>\r\n        <h3><EditableSpan name={props.title} refreshingTitle={newTodolistTitle}/>\r\n            <IconButton size={'medium'}  onClick={todolistRemover} style={{padding:\"5px\",fontSize:\"1rem\"}}>\r\n                <Delete/>\r\n            </IconButton>\r\n            {/*<NewButton callback={todolistRemover} title={'X'}/>*/}\r\n        </h3>\r\n        <AddItemForm  addItem={newAddTask} />\r\n\r\n        <ul style={{listStyle:\"none\", padding:\"0\"}}>\r\n            {props.tasks.map((mTasks) => {\r\n                const taskRemover = ()=> props.removeTask(mTasks.id,props.TodolistID)\r\n                const checkHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeCheckbox(e.currentTarget.checked, mTasks.id, props.TodolistID )\r\n                }\r\n                const refreshTitle = (title:string) => props.refreshingTaskTitle(mTasks.id, title, props.TodolistID)\r\n                let inputChecked = mTasks.isDone ? s.isDone : ''\r\n\r\n                return (\r\n                    <li key={mTasks.id} className={inputChecked} >\r\n                        <IconButton size={'small'}  onClick={taskRemover}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                        <Checkbox checked={mTasks.isDone} onChange={checkHandler} size={'small'} color={'primary'}/>\r\n                        {/*<input  type=\"checkbox\" checked={mTasks.isDone} onChange={checkHandler}/>*/}\r\n                        <EditableSpan name={mTasks.title} refreshingTitle={refreshTitle}/>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n\r\n        <div>\r\n            <NewButton callback={()=> changeTdlButton('All')} title={'All'} filter={props.filter}/>\r\n            <NewButton callback={()=> changeTdlButton('Active')} title={'Active'} filter={props.filter}/>\r\n            <NewButton callback={()=> changeTdlButton('Completed')} title={'Completed'} filter={props.filter}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n//-----------------------------------------------------------------------------------------\r\nexport type typeFilter = 'All' | 'Active' | 'Completed'\r\nexport type TodolistIdType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: typeFilter\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------\r\nfunction App() {\r\n    const TodolistID1 = '359f-1756'\r\n    const TodolistID2 = '368d-1756'\r\n    const [todolists, setTodolist] = useState<Array<TodolistType>>([\r\n        {id: TodolistID1, title: 'What to learn', filter: 'All'},\r\n        {id: TodolistID2, title: 'What to learn Extra', filter: 'All'}\r\n    ])\r\n    let [tasks, setTasks] = useState<TodolistIdType>({\r\n            [TodolistID1]: [\r\n                {id: v1(), title: \"Javascript\", isDone: true},\r\n                {id: v1(), title: \"Node JS\", isDone: false},\r\n                {id: v1(), title: \"React\", isDone: true},\r\n            ],\r\n            [TodolistID2]: [\r\n                {id: v1(), title: \"HTML\", isDone: false},\r\n                {id: v1(), title: \"CSS\", isDone: false},\r\n                {id: v1(), title: \"Angular\", isDone: true}\r\n            ]\r\n        })\r\n\r\n    const changeCheckbox = (checkbox: boolean, id: string, TodolistID: string) => {\r\n        setTasks({...tasks, [TodolistID]: tasks[TodolistID].map(td => td.id === id ? {...td, isDone: checkbox} : td)})\r\n        //берем массив, ищем объект с нужным id, если находим - расчехляем объект и меняем значение isDone на пришедшее\r\n        //checkbox, если id не совпадают, то объект не изменяем\r\n    }\r\n    const refreshingTaskTitle = (id: string, title:string,  TodolistID: string) => {\r\n        setTasks({...tasks, [TodolistID]: tasks[TodolistID].map(td => td.id === id ? {...td, title: title} : td)})\r\n    }\r\n    const removeTask = (id: string, TodolistID: string) => {\r\n        setTasks({...tasks, [TodolistID]: tasks[TodolistID].filter(t => t.id !== id)})\r\n    }\r\n    const addTask = (title: string, TodolistID: string) => {\r\n        let newTask = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [TodolistID]: [newTask, ...tasks[TodolistID]]})\r\n    }\r\n    const changeTodolist = (value: typeFilter, TodolistID: string) => {\r\n        setTodolist(todolists.map(td => td.id === TodolistID ? {...td, filter: value} : td))\r\n    }\r\n    const refreshTodolistTitle = (title:string, TodolistID: string) => {\r\n        setTodolist(todolists.map(td => td.id === TodolistID ? {...td, title: title} : td))\r\n    }\r\n    const removeTodolist = (TodolistID: string) => {\r\n        setTodolist(todolists.filter(tl => tl.id !== TodolistID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[TodolistID] //вместе с тудулистом удаляем таски\r\n        setTasks(copyTasks)\r\n    }\r\n    const addTodoList = (title: string) =>{\r\n        let todolist:TodolistType = {id:v1(), title:title, filter:'All'}\r\n        setTodolist([todolist,...todolists])\r\n        setTasks({...tasks, [todolist.id]:[]})\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding:\"15px 0\", justifyContent: \"center\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    {todolists.map(t => {\r\n                        let filteredTasks = tasks[t.id]\r\n                        if (t.filter === 'Active') {\r\n                            filteredTasks = tasks[t.id].filter(f => !f.isDone)\r\n                        }\r\n                        if (t.filter === 'Completed') {\r\n                            filteredTasks = tasks[t.id].filter(f => f.isDone)\r\n                        }\r\n                        return <Grid item>\r\n                            <Paper elevation={10} style={{padding:\"15px\"}}>\r\n                                <Todolist\r\n                                    key={t.id}\r\n                                    TodolistID={t.id}\r\n                                    title={t.title}\r\n                                    tasks={filteredTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeTodolist={changeTodolist}\r\n                                    addTask={addTask}\r\n                                    changeCheckbox={changeCheckbox}\r\n                                    filter={t.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    refreshingTaskTitle={refreshingTaskTitle}\r\n                                    refreshTodolistTitle={refreshTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}