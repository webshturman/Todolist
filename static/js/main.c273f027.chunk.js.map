{"version":3,"sources":["App.module.css","Components/NewButton.tsx","Components/AddItemForm.tsx","Components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NewButton","props","classButton","filter","title","s","activeFilter","className","onClick","callback","AddItemForm","addItem","useState","setTitle","error","setError","inputClasses","errorInput","nonErrorInput","value","onChange","e","currentValue","currentTarget","trim","onKeyPress","key","errorMessage","EditableSpan","name","refreshingTitle","condition","setCondition","type","onBlur","autoFocus","onDoubleClick","Todolist","changeTdlButton","changeTodolist","TodolistID","refreshTodolistTitle","removeTodolist","addTask","tasks","map","mTasks","inputChecked","isDone","id","removeTask","checked","changeCheckbox","refreshingTaskTitle","App","todolists","setTodolist","v1","setTasks","checkbox","td","t","newTask","tl","copyTasks","todolist","filteredTasks","f","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c273f027.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"App_errorInput__dcfmk\",\"nonErrorInput\":\"App_nonErrorInput__35KCE\",\"errorMessage\":\"App_errorMessage__3h7_G\",\"activeFilter\":\"App_activeFilter__18OwP\",\"isDone\":\"App_isDone__2ibD8\"};","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\n\r\ntype NewButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    filter?:string\r\n}\r\n\r\nexport const NewButton = (props:NewButtonPropsType) => {\r\n    let classButton = props.filter === props.title ? s.activeFilter : ''\r\n    return (\r\n      <button className={classButton} onClick={props.callback}>{props.title}</button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from '../App.module.css'\r\nimport {NewButton} from \"./NewButton\";\r\n\r\n\r\nexport type InputType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\nexport const AddItemForm: React.FC<InputType> = ({ addItem}) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState('')\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = e.currentTarget.value\r\n        if (!currentValue.trim()) {\r\n            setError('Type some text')\r\n            setTitle('')\r\n        } else {\r\n            setTitle(currentValue)\r\n            setError('')\r\n        }\r\n    }\r\n    const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Type some text')\r\n        }\r\n    }\r\n    const addHandler = () => {\r\n        if (title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Type some text')\r\n        }\r\n    }\r\n    const inputClasses = error ? s.errorInput : s.nonErrorInput\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input className={inputClasses} value={title} onChange={changeInputValue} onKeyPress={onKeyHandler}/>\r\n                <NewButton callback={addHandler} title={'+'}/>\r\n            </div>\r\n            <div className={s.errorMessage}>{error}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\nexport type EditableSpanPropsType = {\r\n    name: string\r\n    refreshingTitle: (title:string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = ({name,refreshingTitle}) => {\r\n    let [condition, setCondition] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(name)\r\n\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setCondition(true)\r\n        // setTitle(name)\r\n    }\r\n    const offEditMode = () => {\r\n        setCondition(false)\r\n        refreshingTitle(title)\r\n    }\r\n\r\n    const keyModeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            setCondition(false)\r\n            refreshingTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {condition ?\r\n                <input\r\n                    type=\"text\"\r\n                    value={title}\r\n                    onBlur={offEditMode}\r\n                    autoFocus={true}\r\n                    onChange={changeTitleHandler}\r\n                    onKeyPress={keyModeHandler}/>\r\n                : <span onDoubleClick={onEditMode}>{name}</span>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TodolistIdType, typeFilter} from \"./App\";\r\nimport {NewButton} from \"./Components/NewButton\";\r\nimport s from'./App.module.css'\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {EditableSpan} from \"./Components/EditableSpan\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id:string, TodolistID:string) => void\r\n    changeTodolist: (filter:typeFilter, TodolistID: string) =>void\r\n    addTask: (title:string, TodolistID:string) => void\r\n    changeCheckbox:(checkbox:boolean, id:string, TodolistID:string) => void\r\n    removeTodolist: (TodolistID:string) =>void\r\n    refreshingTaskTitle: (id: string, title:string,  TodolistID: string) => void\r\n    refreshTodolistTitle:(title:string, TodolistID: string)=>void\r\n    filter:typeFilter\r\n    TodolistID:string\r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const todolistRemover = ()=> props.removeTodolist(props.TodolistID)\r\n    const changeTdlButton = (filter:typeFilter) => props.changeTodolist(filter,props.TodolistID)\r\n    const newAddTask = (title:string)=> props.addTask(title, props.TodolistID)\r\n    const newTodolistTitle = (title:string)=> props.refreshTodolistTitle(title, props.TodolistID)\r\n\r\n//-----------------------------------------------------------------------------------------------------------------\r\n    return <div>\r\n        <h3><EditableSpan name={props.title} refreshingTitle={newTodolistTitle}/> <NewButton callback={todolistRemover} title={'X'}/></h3>\r\n        <AddItemForm  addItem={newAddTask} />\r\n\r\n        <ul>\r\n            {props.tasks.map((mTasks) => {\r\n                const taskRemover = ()=> props.removeTask(mTasks.id,props.TodolistID)\r\n                const checkHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeCheckbox(e.currentTarget.checked, mTasks.id, props.TodolistID )\r\n                }\r\n                const refreshTitle = (title:string) => props.refreshingTaskTitle(mTasks.id, title, props.TodolistID)\r\n                let inputChecked = mTasks.isDone ? s.isDone : ''\r\n\r\n                return (\r\n                    <li key={mTasks.id} className={inputChecked} >\r\n                        <NewButton callback={taskRemover} title={'X'}/>\r\n                        <input  type=\"checkbox\" checked={mTasks.isDone} onChange={checkHandler}/>\r\n                        <EditableSpan name={mTasks.title} refreshingTitle={refreshTitle}/>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n\r\n        <div>\r\n            <NewButton callback={()=> changeTdlButton('All')} title={'All'} filter={props.filter}/>\r\n            <NewButton callback={()=> changeTdlButton('Active')} title={'Active'} filter={props.filter}/>\r\n            <NewButton callback={()=> changeTdlButton('Completed')} title={'Completed'} filter={props.filter}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\n//-----------------------------------------------------------------------------------------\r\nexport type typeFilter = 'All' | 'Active' | 'Completed'\r\nexport type TodolistIdType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: typeFilter\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------\r\nfunction App() {\r\n    const TodolistID1 = '359f-1756'\r\n    const TodolistID2 = '368d-1756'\r\n    const [todolists, setTodolist] = useState<Array<TodolistType>>([\r\n        {id: TodolistID1, title: 'What to learn', filter: 'All'},\r\n        {id: TodolistID2, title: 'What to learn Extra', filter: 'All'}\r\n    ])\r\n    let [tasks, setTasks] = useState<TodolistIdType>({\r\n            [TodolistID1]: [\r\n                {id: v1(), title: \"Javascript\", isDone: true},\r\n                {id: v1(), title: \"Node JS\", isDone: false},\r\n                {id: v1(), title: \"React\", isDone: true},\r\n            ],\r\n            [TodolistID2]: [\r\n                {id: v1(), title: \"HTML\", isDone: false},\r\n                {id: v1(), title: \"CSS\", isDone: false},\r\n                {id: v1(), title: \"Angular\", isDone: true}\r\n            ]\r\n        }\r\n    )\r\n\r\n    const changeCheckbox = (checkbox: boolean, id: string, TodolistID: string) => {\r\n        setTasks({...tasks, [TodolistID]: tasks[TodolistID].map(td => td.id === id ? {...td, isDone: checkbox} : td)})\r\n        //берем массив, ищем объект с нужным id, если находим - расчехляем объект и меняем значение isDone на пришедшее\r\n        //checkbox, если id не совпадают, то объект не изменяем\r\n    }\r\n    const refreshingTaskTitle = (id: string, title:string,  TodolistID: string) => {\r\n        setTasks({...tasks, [TodolistID]: tasks[TodolistID].map(td => td.id === id ? {...td, title: title} : td)})\r\n    }\r\n    const removeTask = (id: string, TodolistID: string) => {\r\n        setTasks({...tasks, [TodolistID]: tasks[TodolistID].filter(t => t.id !== id)})\r\n    }\r\n    const addTask = (title: string, TodolistID: string) => {\r\n        let newTask = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [TodolistID]: [newTask, ...tasks[TodolistID]]})\r\n    }\r\n    const changeTodolist = (value: typeFilter, TodolistID: string) => {\r\n        setTodolist(todolists.map(td => td.id === TodolistID ? {...td, filter: value} : td))\r\n    }\r\n    const refreshTodolistTitle = (title:string, TodolistID: string) => {\r\n        setTodolist(todolists.map(td => td.id === TodolistID ? {...td, title: title} : td))\r\n    }\r\n    const removeTodolist = (TodolistID: string) => {\r\n        setTodolist(todolists.filter(tl => tl.id !== TodolistID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[TodolistID] //вместе с тудулистом удаляем таски\r\n        setTasks(copyTasks)\r\n    }\r\n    const addTodoList = (title: string) =>{\r\n        let todolist:TodolistType = {id:v1(), title:title, filter:'All'}\r\n        setTodolist([todolist,...todolists])\r\n        setTasks({...tasks, [todolist.id]:[]})\r\n    }\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todolists.map(t => {\r\n                let filteredTasks = tasks[t.id]\r\n                if (t.filter === 'Active') {\r\n                    filteredTasks = tasks[t.id].filter(f => !f.isDone)\r\n                }\r\n                if (t.filter === 'Completed') {\r\n                    filteredTasks = tasks[t.id].filter(f => f.isDone)\r\n                }\r\n                return (\r\n                    <Todolist\r\n                        key={t.id}\r\n                        TodolistID={t.id}\r\n                        title={t.title}\r\n                        tasks={filteredTasks}\r\n                        removeTask={removeTask}\r\n                        changeTodolist={changeTodolist}\r\n                        addTask={addTask}\r\n                        changeCheckbox={changeCheckbox}\r\n                        filter={t.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        refreshingTaskTitle={refreshingTaskTitle}\r\n                        refreshTodolistTitle={refreshTodolistTitle}\r\n                    />)\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}