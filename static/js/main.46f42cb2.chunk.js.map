{"version":3,"sources":["App.module.css","serviceWorker.ts","Components/NewButton.tsx","Components/AddItemForm.tsx","Components/EditableSpan.tsx","state/tasks-reducer.ts","Components/Task.tsx","Todolist.tsx","state/todolists-reducer.ts","AppWithReducers.tsx","state/store.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","NewButton","React","memo","props","console","log","Button","onClick","callback","variant","style","margin","size","color","filter","title","AddItemForm","addItem","useState","setTitle","error","setError","TextField","value","onChange","e","currentValue","currentTarget","trim","label","onKeyPress","key","height","helperText","IconButton","EditableSpan","name","changeTitle","condition","setCondition","type","onBlur","autoFocus","onDoubleClick","initialState","Task","TaskID","TodolistID","dispatch","useDispatch","task","useSelector","state","tasks","ts","id","inputChecked","isDone","s","className","removedTaskID","removeTaskAC","Delete","Checkbox","checked","checkboxState","checkbox","changeCheckboxAC","changedTaskTitleID","newTaskTitle","changeTaskTitleAC","Todolist","todolistRemover","useCallback","removeTodolist","changeTdlButton","changeTodolist","newAddTask","taskTitle","newTodolistTitle","changeTodolistTitle","filteredTasks","f","padding","fontSize","listStyle","map","mTasks","v1","AppWithReducers","todolists","action","addTodoList","todolistId","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","spacing","t","item","Paper","elevation","rootReducer","combineReducers","tl","td","newTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.46f42cb2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"App_errorInput__dcfmk\",\"nonErrorInput\":\"App_nonErrorInput__35KCE\",\"errorMessage\":\"App_errorMessage__3h7_G\",\"activeFilter\":\"App_activeFilter__18OwP\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype NewButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    filter?:string\r\n}\r\n\r\nexport const NewButton = React.memo((props:NewButtonPropsType) => {\r\n    console.log('Show Button')\r\n    // let classButton = props.filter === props.title ? \"secondary\" : \"primary\"\r\n    return (\r\n      <Button  onClick={props.callback} variant={'contained'} style={{margin:'0 5px 0 0'}}\r\n               size={'small'} color={props.filter === props.title ? \"secondary\" : \"primary\"}>\r\n          {props.title}\r\n      </Button>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\nexport type InputType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\nexport const AddItemForm: React.FC<InputType> = React.memo(({ addItem}) => {\r\n    console.log('AddItemForm')\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState(false)\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = e.currentTarget.value\r\n        if (!currentValue.trim()) {\r\n            setError(true)\r\n            // setTitle('')\r\n        } else {\r\n            setTitle(currentValue)\r\n            setError(false)\r\n        }\r\n    }\r\n    const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        }\r\n    }\r\n    const addHandler = () => {\r\n        if (title) {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField value={title} onChange={changeInputValue} size={'small'} label={'Title'}\r\n                           onKeyPress={onKeyHandler} variant={'outlined'} style={{height:'20px'}}\r\n                           helperText={error && 'Type some text'} color={\"primary\"} error={error}>\r\n                </TextField>\r\n\r\n                <IconButton onClick={addHandler} color={'primary'}>\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    name: string\r\n    changeTitle: (title:string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(({name,changeTitle}) => {\r\n    let [condition, setCondition] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(name)\r\n\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setCondition(true)\r\n        // setTitle(name)\r\n    }\r\n    const offEditMode = () => {\r\n        setCondition(false)\r\n        changeTitle(title)\r\n    }\r\n\r\n    const keyModeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            setCondition(false)\r\n            changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {condition ?\r\n                <TextField  type=\"text\"\r\n                            value={title}\r\n                            onBlur={offEditMode}\r\n                            autoFocus={true}\r\n                            onChange={changeTitleHandler}\r\n                            onKeyPress={keyModeHandler}>\r\n\r\n                </TextField>\r\n                : <span onDoubleClick={onEditMode}>{name}</span>\r\n            }\r\n        </>\r\n    );\r\n});\r\n\r\n","import {TaskStateType} from \"../AppWithReducers\";\r\nimport {v1} from \"uuid\";\r\nimport {ActionAddTodolistType, ActionRemoveTodolistType} from \"./todolists-reducer\";\r\n//----------------------------------------------------------------------------------\r\n\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    id: string\r\n    title: string\r\n    TodolistID: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    TodolistID: string\r\n}\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    TodolistID: string\r\n}\r\ntype TaskCheckboxActionType = {\r\n    type: 'CHANGE-CHECKBOX'\r\n    checkbox: boolean\r\n    id: string\r\n    TodolistID: string\r\n}\r\n\r\ntype ActionType = ChangeTaskTitleActionType | AddTaskActionType | RemoveTaskActionType | TaskCheckboxActionType\r\n    | ActionAddTodolistType | ActionRemoveTodolistType\r\n//----------------------------------------------------------------------------------------------------\r\n\r\nconst initialState: TaskStateType  = {\r\n    // [TodolistID1]: [\r\n    //     {id: v1(), title: \"Javascript\", isDone: true},\r\n    //     {id: v1(), title: \"Node JS\", isDone: false},\r\n    //     {id: v1(), title: \"React\", isDone: true},\r\n    // ],\r\n    // [TodolistID2]: [\r\n    //     {id: v1(), title: \"HTML\", isDone: false},\r\n    //     {id: v1(), title: \"CSS\", isDone: false},\r\n    //     {id: v1(), title: \"Angular\", isDone: true}\r\n    // ]\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.TodolistID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.TodolistID]]\r\n            }\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.TodolistID]: state[action.TodolistID].filter(task => task.id !== action.id)}\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.TodolistID]: state[action.TodolistID].map(task => task.id === action.id ? {\r\n                    ...task,\r\n                    title: action.title\r\n                } : task)\r\n            }\r\n        case 'CHANGE-CHECKBOX':\r\n            return {\r\n                ...state,\r\n                [action.TodolistID]: state[action.TodolistID].map(task => task.id === action.id ? {\r\n                    ...task,\r\n                    isDone: action.checkbox\r\n                } : task)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]:[]\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            const newTasks = {...state}\r\n            delete newTasks[action.id]\r\n            return newTasks\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//---------------------------------------------------------------------------------------------------------------------------------\r\nexport const addTaskAC = (taskTitle: string, TodolistID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title: taskTitle, TodolistID: TodolistID}\r\n}\r\nexport const removeTaskAC = (removedTaskID: string, TodolistID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', id: removedTaskID, TodolistID: TodolistID}\r\n}\r\nexport const changeTaskTitleAC = (changedTaskTitleID: string, newTaskTitle: string, TodolistID: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', id: changedTaskTitleID, title: newTaskTitle, TodolistID: TodolistID}\r\n}\r\nexport const changeCheckboxAC = (TaskID: string, checkboxState: boolean,  TodolistID: string): TaskCheckboxActionType => {\r\n    return {type: 'CHANGE-CHECKBOX', id: TaskID, checkbox: checkboxState, TodolistID: TodolistID}\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {changeCheckboxAC, changeTaskTitleAC, removeTaskAC} from \"../state/tasks-reducer\";\r\nimport s from \"../App.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../state/store\";\r\nimport {TaskType} from \"../Todolist\";\r\n\r\nexport type SingleTaskType ={\r\n    TaskID:string\r\n    TodolistID:string\r\n}\r\n\r\nexport const Task: React.FC<SingleTaskType> = React.memo(({TaskID, TodolistID}) => {\r\n    console.log('Task Render')\r\n    const dispatch = useDispatch()\r\n    const task = useSelector<AppRootState, TaskType>(state => {\r\n       return  state.tasks[TodolistID].filter((ts:TaskType) => ts.id === TaskID)[0]\r\n    })\r\n    const taskRemover = ()=> dispatch(removeTaskAC(TaskID,TodolistID))\r\n    const checkHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeCheckboxAC(TaskID, e.currentTarget.checked, TodolistID))\r\n    }\r\n    const changeTitle = (title:string) => dispatch(changeTaskTitleAC(TaskID, title, TodolistID))\r\n    let inputChecked = task.isDone ? s.isDone : ''\r\n    return (\r\n        <>\r\n            <li key={task.id} className={inputChecked}>\r\n                <IconButton size={'small'} onClick={taskRemover}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                <Checkbox checked={task.isDone} onChange={checkHandler} size={'small'} color={'primary'}/>\r\n                <EditableSpan name={task.title} changeTitle={changeTitle}/>\r\n            </li>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default Task;","import React, {useCallback} from 'react';\r\nimport {typeFilter} from \"./AppWithReducers\";\r\nimport {NewButton} from \"./Components/NewButton\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {EditableSpan} from \"./Components/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {addTaskAC} from \"./state/tasks-reducer\";\r\nimport Task from \"./Components/Task\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    changeTodolist: (filter:typeFilter, TodolistID: string) =>void\r\n    removeTodolist: (TodolistID:string) =>void\r\n    changeTodolistTitle:(title:string, TodolistID: string)=>void\r\n    filter:typeFilter\r\n    TodolistID:string\r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('TodolistRender')\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootState, Array<TaskType>>((state)=> state.tasks[props.TodolistID])\r\n    //берем таски для конкретного тудулиста\r\n\r\n    //----------------------------------------------------------------------------------------------------\r\n    const todolistRemover = useCallback(()=> props.removeTodolist(props.TodolistID),[props.removeTodolist, props.TodolistID])\r\n    const changeTdlButton = useCallback((filter:typeFilter) => props.changeTodolist(filter, props.TodolistID), [props.changeTodolist,props.TodolistID])\r\n    const newAddTask = useCallback((title:string)=> dispatch(addTaskAC(title, props.TodolistID)),[dispatch])\r\n    const newTodolistTitle = useCallback((title:string)=> props.changeTodolistTitle(title, props.TodolistID),[props.changeTodolistTitle, props.TodolistID])\r\n\r\n    let filteredTasks = tasks\r\n    if (props.filter === 'Active') {\r\n        filteredTasks = tasks.filter(f => !f.isDone)\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        filteredTasks = tasks.filter(f => f.isDone)\r\n    }\r\n//-----------------------------------------------------------------------------------------------------------------\r\n    return <div>\r\n        <h3><EditableSpan name={props.title} changeTitle={newTodolistTitle}/>\r\n            <IconButton size={'medium'}  onClick={todolistRemover} style={{padding:\"5px\",fontSize:\"1rem\"}}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm  addItem={newAddTask} />\r\n\r\n        <ul style={{listStyle:\"none\", padding:\"0\"}}>\r\n\r\n            {filteredTasks.map((mTasks) => {\r\n                return <Task key={mTasks.id} TaskID={mTasks.id} TodolistID={props.TodolistID}/>\r\n            })}\r\n        </ul>\r\n\r\n        <div>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('All'),[changeTdlButton])} title={'All'} filter={props.filter}/>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('Active'),[changeTdlButton])} title={'Active'} filter={props.filter}/>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('Completed'),[changeTdlButton])} title={'Completed'} filter={props.filter}/>\r\n        </div>\r\n    </div>\r\n})\r\n","import {TodolistType, typeFilter} from \"../AppWithReducers\";\r\nimport {v1} from \"uuid\";\r\n//--------------------------------------------------------------\r\nexport type ActionAddTodolistType = {\r\n    type:'ADD-TODOLIST'\r\n    title:string\r\n    todolistId:string\r\n}\r\nexport type ActionRemoveTodolistType = {\r\n    type:'REMOVE-TODOLIST'\r\n    id:string\r\n}\r\nexport type ActionChangeTodolistTitleType = {\r\n    type:'CHANGE-TODOLIST-TITLE'\r\n    id:string\r\n    title:string\r\n}\r\nexport type ActionChangeTodolistType = {\r\n    type:'CHANGE-TODOLIST-FILTER'\r\n    filter:typeFilter\r\n    id:string\r\n}\r\n\r\ntype ActionType = ActionAddTodolistType | ActionRemoveTodolistType | ActionChangeTodolistTitleType | ActionChangeTodolistType\r\n//---------------------------------------------------------------------------------\r\nexport const TodolistID1 = v1()\r\nexport const TodolistID2 = v1()\r\n// const initialState:Array<TodolistType>  = [\r\n//     {id: TodolistID1, title: 'What to learn', filter: 'All'},\r\n//     {id: TodolistID2, title: 'What to learn Extra', filter: 'All'}\r\n// ]\r\nconst initialState:Array<TodolistType>  = []\r\nexport const todolistsReducer = (state:Array<TodolistType> = initialState, action:ActionType):Array<TodolistType> => {\r\n    switch(action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [{id:action.todolistId, title:action.title, filter:'All'}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl,title:action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(td=> td.id === action.id ? {...td,filter:action.filter} : td)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//----------------------------------------------------------------------\r\nexport const addTodolistAC = (newTodolistTitle:string):ActionAddTodolistType => {\r\n    return {type:'ADD-TODOLIST', title:newTodolistTitle, todolistId:v1()}\r\n}\r\nexport const removeTodolistAC = (todolistId:string):ActionRemoveTodolistType => {\r\n    return {type:'REMOVE-TODOLIST', id:todolistId}\r\n}\r\nexport const changeTodolistTitleAC = (newTodolistTitle:string,todolistId:string,):ActionChangeTodolistTitleType => {\r\n    return {type:'CHANGE-TODOLIST-TITLE', title:newTodolistTitle, id:todolistId}\r\n}\r\nexport const changeTodolistFilterAC = (newTodolistFilter:typeFilter,todolistId:string):ActionChangeTodolistType => {\r\n    return {type:'CHANGE-TODOLIST-FILTER', filter:newTodolistFilter, id:todolistId}\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n//-----------------------------------------------------------------------------------------\r\nexport type typeFilter = 'All' | 'Active' | 'Completed'\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: typeFilter\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------\r\nexport function AppWithReducers() {\r\n    console.log('App Render')\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootState, Array<TodolistType>>((state)=>state.todolists)\r\n\r\n    const changeTodolist = useCallback((value: typeFilter, TodolistID: string) => {\r\n        dispatch(changeTodolistFilterAC(value, TodolistID))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title:string, TodolistID: string) => {\r\n        dispatch(changeTodolistTitleAC(title, TodolistID))\r\n    },[dispatch])\r\n    const removeTodolist = useCallback((TodolistID: string) => {\r\n        const action = removeTodolistAC(TodolistID)\r\n        dispatch(action)\r\n    },[dispatch])\r\n    const addTodoList = useCallback((title: string) =>{\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    },[dispatch])\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding:\"15px 0\", justifyContent: \"center\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    {todolists.map(t => {\r\n\r\n                        return <Grid item key={t.id}>\r\n                            <Paper elevation={10} style={{padding:\"15px\"}}>\r\n                                <Todolist\r\n                                    key={t.id}\r\n                                    TodolistID={t.id}\r\n                                    title={t.title}\r\n                                    changeTodolist={changeTodolist}\r\n                                    filter={t.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists:todolistsReducer,\r\n    tasks:tasksReducer\r\n})\r\nexport type  AppRootState = ReturnType<typeof rootReducer> // автоматически определяем тип общего стейта\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithReducers} from \"./AppWithReducers\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithReducers/>\r\n    </Provider>\r\n    ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}