{"version":3,"sources":["App.module.css","enums/actionsConstants.ts","state/actions/loader-actions.ts","api/types/taskApiType.ts","Components/ErrorSnackBar.tsx","api/instance.ts","api/auth-api.ts","utils/error-utils.ts","state/actions/auth-actions.ts","state/actions/todolists-actions.ts","state/auth-reducer.ts","features/Login.tsx","api/todolist-api.ts","api/task-api.ts","state/actions/tasks-actions.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","Components/EditableSpan.tsx","features/TodolistsList/Task.tsx","Components/AddItemForm.tsx","Components/NewButton.tsx","features/TodolistsList/Todolist.tsx","features/TodolistsList/TodoListContainer.tsx","AppWithReducers.tsx","state/loader-reducer.ts","state/store.tsx","index.tsx"],"names":["module","exports","ACTIONS_TYPE","TaskStatuses","TaskPriorities","ChangeLoadingStatusAC","status","type","CHANGE_LOADER_STATUS","SetErrorMessageAC","error","SET_ERROR_MESSAGE","Alert","React","props","ref","elevation","variant","ErrorSnackBar","useSelector","state","loader","dispatch","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","handleServerError","messages","length","handleNetworkError","message","getAuthStatus","GET_AUTH_STATUS","removeTodolistAC","todolistId","REMOVE_TODOLIST_TYPE","changeTodolistTitleAC","title","CHANGE_TODOLIST_TITLE_TYPE","changeEntityStatusAC","CHANGE_ENTITY_STATUS","initialAuthState","isLoggedIn","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","a","res","resultCode","resetForm","to","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","helperText","FormControlLabel","control","Checkbox","checked","color","TodoListAPI","put","TaskAPI","todolistID","taskID","model","deleteTaskAC","DELETE_TASKS_TYPE","updateTaskAC","UPDATE_TASKS_TYPE","initialState","updateTaskTC","getState","allTasks","tasks","task","find","ts","id","newModel","description","priority","startDate","deadline","EditableSpan","memo","name","changeTitle","useState","condition","setCondition","setTitle","value","onBlur","autoFocus","onChange","e","currentTarget","onKeyPress","key","onDoubleClick","Task","TaskID","TodolistID","filter","taskRemover","useCallback","inputChecked","Completed","s","isDone","className","IconButton","size","onClick","Delete","New","AddItemForm","addItem","entityStatus","setError","addHandler","trim","style","height","disabled","NewButton","Button","callback","Todolist","changeTodolist","removeTodolist","changeTodolistTitle","todolistRemover","changeTdlButton","newAddTask","ADD_TASKS_TYPE","addTaskTC","newTodolistTitle","filteredTasks","padding","fontSize","listStyle","map","mTasks","TodoListContainer","todoLists","useEffect","todolist","GET_TODOLIST_TYPE","forEach","todoList","items","GET_TASKS_TYPE","newTodolistFilter","CHANGE_TODOLIST_FILTER_TYPE","updateTodosTitleTC","addTodoList","todo","ADD_TODOLIST_TYPE","addTodosTC","spacing","Paper","AppWithReducers","isInitialized","initialized","GET_INITIALIZED","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","CLEAR_TODOS_DATA","LinearProgress","Container","fixed","path","element","textAlign","top","width","CircularProgress","InitialLoaderState","rootReducer","combineReducers","action","tl","td","copyTasks","todoListId","newTasks","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c39aef57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"App_errorInput__dcfmk\",\"nonErrorInput\":\"App_nonErrorInput__35KCE\",\"errorMessage\":\"App_errorMessage__3h7_G\",\"activeFilter\":\"App_activeFilter__18OwP\"};","export enum ACTIONS_TYPE {\r\n    ADD_TODOLIST_TYPE = 'AppWithReducers/ADD_TODOLIST_TYPE',\r\n    REMOVE_TODOLIST_TYPE = 'AppWithReducers/REMOVE_TODOLIST_TYPE',\r\n    CHANGE_TODOLIST_FILTER_TYPE = 'AppWithReducers/CHANGE_TODOLIST_TYPE',\r\n    CHANGE_TODOLIST_TITLE_TYPE = 'AppWithReducers/CHANGE_TODOLIST_TITLE_TYPE',\r\n    GET_TODOLIST_TYPE = 'AppWithReducers/GET_TODOLIST_TYPE',\r\n    ADD_TASKS_TYPE = 'todolist/ADD_TASKS_TYPE',\r\n    GET_TASKS_TYPE = 'todolist/GET_TASKS_TYPE',\r\n    DELETE_TASKS_TYPE = 'Task/DELETE_TASKS_TYPE',\r\n    UPDATE_TASKS_TYPE = 'Task/UPDATE_TASKS_TYPE',\r\n    CHANGE_LOADER_STATUS='AppWithReducers/CHANGE_LOADER_STATUS',\r\n    SET_ERROR_MESSAGE='AppWithReducers/SET_ERROR_MESSAGE',\r\n    CHANGE_ENTITY_STATUS='Todolist/CHANGE_ENTITY_STATUS',\r\n    GET_AUTH_STATUS='Auth/GET_AUTH_STATUS',\r\n    GET_INITIALIZED='loader/GET_INITIALIZED',\r\n    CLEAR_TODOS_DATA='todolist/CLEAR_TODOS_DATA',\r\n}","import {RequestStatusType} from \"../loader-reducer\";\r\nimport {ACTIONS_TYPE} from \"../../enums/actionsConstants\";\r\n\r\nexport type ActionLoaderType = ReturnType<typeof ChangeLoadingStatusAC> | ReturnType<typeof SetErrorMessageAC>\r\n    | ReturnType<typeof getInitialized>\r\n\r\nexport const ChangeLoadingStatusAC = (status:RequestStatusType) => {\r\n    return {type: ACTIONS_TYPE.CHANGE_LOADER_STATUS, status} as const\r\n}\r\nexport const SetErrorMessageAC = (error:string | null) => {\r\n    return {type: ACTIONS_TYPE.SET_ERROR_MESSAGE, error} as const\r\n}\r\nexport const getInitialized = (initialized:boolean) => {\r\n    return {type: ACTIONS_TYPE.GET_INITIALIZED, initialized} as const\r\n}","export type UpdateTasksModelType ={\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTaskType={\r\n    items:Array<TaskObjectType>\r\n    totalCount:number\r\n    error: string\r\n}\r\nexport type TaskObjectType={\r\n    description: string\r\n    title: string\r\n    // completed: boolean\r\n    status: TaskStatuses\r\n    priority:TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: Date\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskObjectType>\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../state/store\";\r\nimport { SetErrorMessageAC } from '../state/actions/loader-actions';\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackBar = () => {\r\n    const error = useSelector<AppRootState, string | null>(state => state.loader.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(SetErrorMessageAC(null))\r\n    };\r\n    const isOpen = error != null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n        // <Stack spacing={2} sx={{ width: '100%' }}>\r\n        //     <Button variant=\"outlined\" onClick={handleClick}>\r\n        //         Open success snackbar\r\n        //     </Button>\r\n\r\n        // {/*<Alert severity=\"error\">This is an error message!</Alert>*/}\r\n        // {/*<Alert severity=\"warning\">This is a warning message!</Alert>*/}\r\n        // {/*<Alert severity=\"info\">This is an information message!</Alert>*/}\r\n        // {/*<Alert severity=\"success\">This is a success message!</Alert>*/}\r\n        // </Stack>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials:true,\r\n    headers: {\r\n        'API-KEY': 'b8b0c036-4edd-4913-8c7f-79ccaeace603'\r\n    },\r\n})\r\n\r\n\r\n","import {ResponseType} from \"../api/todolist-api\";\r\nimport { instance } from \"./instance\";\r\nimport {authDataType, LoginDataType} from \"./types/authApiTypes\";\r\n\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get<ResponseType<authDataType>>(`auth/me`)\r\n    },\r\n    login(data:LoginDataType){\r\n        return instance.post<ResponseType<{userId:number}>>('auth/login',data)\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n","\r\nimport {ResponseType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport { ActionLoaderType, ChangeLoadingStatusAC, SetErrorMessageAC } from \"../state/actions/loader-actions\";\r\n\r\nexport const handleServerError = <T>(data:ResponseType<T>,dispatch: Dispatch<ActionLoaderType>)=> {\r\n    if(data.messages.length){\r\n        dispatch(SetErrorMessageAC(data.messages[0]))\r\n    } else{\r\n        dispatch(SetErrorMessageAC(\"some error\"))\r\n    }\r\n    dispatch(ChangeLoadingStatusAC('failed'))\r\n}\r\n\r\nexport const handleNetworkError = (error:{message:string | null},dispatch: Dispatch<ActionLoaderType>)=> {\r\n    dispatch(SetErrorMessageAC(error.message ? error.message : 'Network connection error'))\r\n    dispatch(ChangeLoadingStatusAC('failed'))\r\n}","import {ACTIONS_TYPE} from \"../../enums/actionsConstants\";\r\n\r\nexport type ActionAuthDataType = ReturnType<typeof getAuthStatus>\r\n\r\nexport const getAuthStatus = (status:boolean) => {\r\n    return {type: ACTIONS_TYPE.GET_AUTH_STATUS, status} as const\r\n}","import {TodolistType} from \"../../api/todolist-api\";\r\nimport {ACTIONS_TYPE} from \"../../enums/actionsConstants\";\r\nimport {typeFilter} from \"../todolists-reducer\";\r\nimport {RequestStatusType} from \"../loader-reducer\";\r\n\r\nexport type ActionAddTodolistType = ReturnType<typeof addTodolistAC>;\r\nexport type ActionRemoveTodolistType = ReturnType<typeof removeTodolistAC>;\r\nexport type ActionChangeTodolistTitleType = ReturnType<typeof changeTodolistTitleAC>;\r\nexport type ActionChangeTodolistType = ReturnType<typeof changeTodolistFilterAC>;\r\nexport type ActionGetTodolistType = ReturnType<typeof getTodosAC>;\r\nexport type ActionChangeEntityStatusType = ReturnType<typeof changeEntityStatusAC>;\r\nexport type ActionClearTodosDataType = ReturnType<typeof clearTodosDataAC>;\r\n\r\nexport type ActionTodolistType = ActionAddTodolistType | ActionRemoveTodolistType\r\n    | ActionChangeTodolistTitleType | ActionChangeTodolistType\r\n    | ActionGetTodolistType | ActionChangeEntityStatusType | ActionClearTodosDataType\r\n//----------------------------------------------------------------------------\r\n\r\nexport const addTodolistAC = (todo: TodolistType) => {\r\n    return {type: ACTIONS_TYPE.ADD_TODOLIST_TYPE, todo} as const\r\n}\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {type: ACTIONS_TYPE.REMOVE_TODOLIST_TYPE, todolistId} as const\r\n}\r\nexport const changeTodolistTitleAC = (title: string, todolistId: string) => {\r\n    return {type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE_TYPE, title, todolistId} as const\r\n}\r\nexport const changeTodolistFilterAC = (newTodolistFilter: typeFilter, todolistId: string) => {\r\n    return {type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER_TYPE, filter: newTodolistFilter, todolistId} as const\r\n}\r\n\r\nexport const getTodosAC = (todolist: Array<TodolistType>) => {\r\n    return {type: ACTIONS_TYPE.GET_TODOLIST_TYPE, todolist} as const\r\n}\r\nexport const changeEntityStatusAC = (status:RequestStatusType, todolistId: string) => {\r\n    return {type: ACTIONS_TYPE.CHANGE_ENTITY_STATUS, status, todolistId} as const\r\n}\r\nexport const clearTodosDataAC = () => {\r\n    return {type: ACTIONS_TYPE.CLEAR_TODOS_DATA} as const\r\n}","\r\nimport {AppThunk} from \"./store\";\r\n\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {handleNetworkError, handleServerError} from \"../utils/error-utils\";\r\nimport {ACTIONS_TYPE} from \"../enums/actionsConstants\";\r\nimport {LoginDataType} from \"../api/types/authApiTypes\";\r\nimport { ActionAuthDataType, getAuthStatus } from \"./actions/auth-actions\";\r\nimport {ChangeLoadingStatusAC, getInitialized } from \"./actions/loader-actions\";\r\nimport { clearTodosDataAC } from \"./actions/todolists-actions\";\r\n\r\nexport type initialAuthStateType =  {\r\n    isLoggedIn:boolean\r\n}\r\n\r\nconst initialAuthState: initialAuthStateType = {\r\n    isLoggedIn:false\r\n}\r\n\r\nexport const authReducer = (state: initialAuthStateType = initialAuthState, action: ActionAuthDataType): initialAuthStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.GET_AUTH_STATUS:\r\n            return {...state, isLoggedIn:action.status}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getAuthData = (): AppThunk => async dispatch => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if(res.data.resultCode === 0){\r\n            dispatch(getAuthStatus(true))\r\n        }else{\r\n\r\n        }\r\n        dispatch(getInitialized(true))\r\n    } catch (error:any) {\r\n        handleNetworkError(error,dispatch)\r\n    }\r\n\r\n}\r\nexport const setLoginData = (data:LoginDataType): AppThunk => async dispatch => {\r\n    dispatch(ChangeLoadingStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(getAuthStatus(true))\r\n        } else{\r\n            handleServerError(res.data,dispatch)\r\n        }\r\n\r\n    } catch (error:any) {\r\n        handleNetworkError(error,dispatch)\r\n    } finally{\r\n        dispatch(ChangeLoadingStatusAC('succeeded'))\r\n    }\r\n\r\n}\r\nexport const setLogOutData = (): AppThunk => async dispatch => {\r\n    dispatch(ChangeLoadingStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        if(res.data.resultCode === 0){\r\n            dispatch(getAuthStatus(false))\r\n            dispatch(clearTodosDataAC())\r\n        } else{\r\n            handleServerError(res.data,dispatch)\r\n        }\r\n\r\n    } catch (error:any) {\r\n        handleNetworkError(error,dispatch)\r\n    } finally{\r\n        dispatch(ChangeLoadingStatusAC('succeeded'))\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../state/store\";\r\nimport {setLoginData} from \"../state/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {FormikErrorType} from \"../api/types/authApiTypes\";\r\n\r\n\r\n// const validate = (values:FormikErrorType) => {\r\n//     const errors: FormikErrorType = {};\r\n//     if (!values.email) {\r\n//         errors.email = 'Email Required';\r\n//     }\r\n//     if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n//         errors.email = 'Invalid email address';\r\n//     }\r\n//     if (values.password.length < 2) {\r\n//         errors.password = 'Password should be at least 2 signs';\r\n//     }\r\n//     return errors;\r\n// }\r\n\r\n\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<FormikErrorType> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email Required';\r\n            }\r\n            if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 2) {\r\n                errors.password = 'Password should be at least 2 signs';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setLoginData(values))\r\n            formik.resetForm()\r\n        },\r\n\r\n    })\r\n    if (isLoggedIn) return <Navigate to={'/'}/>\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label='Email' margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                                   error={!!formik.errors.email && formik.touched.email}\r\n                                   helperText={formik.touched.email ? formik.errors.email : ''}\r\n                        />\r\n                        <TextField type=\"password\" label='Password' margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                                   error={!!formik.errors.password && formik.touched.password}\r\n                                   helperText={formik.touched.password ? formik.errors.password : ''}\r\n                            // name={\"password\"}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox checked={formik.values.rememberMe}\r\n                                      {...formik.getFieldProps(\"rememberMe\")}/>\r\n                        }/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\n","import { instance } from \"./instance\"\r\n\r\nexport const TodoListAPI = {\r\n    getTodos(){\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodos(title:string){\r\n        return instance.post<ResponseType<Created>>('todo-lists',{title})\r\n    },\r\n    updateTodos(title:string, todolistId:string){\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodos(todolistId:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n}\r\n\r\nexport type TodolistType={\r\n    id:string\r\n    addedDate?:string\r\n    order?:string\r\n    title:string\r\n}\r\nexport type ResponseType<T={}> ={\r\n    resultCode: number\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\ntype Created = { item: TodolistType };//Alt-Ctrl-V","import { instance } from \"./instance\";\r\nimport {ResponseType} from \"./todolist-api\";\r\nimport {GetTaskType, TaskObjectType, UpdateTasksModelType } from \"./types/taskApiType\";\r\n\r\n\r\nexport const TaskAPI = {\r\n    getTsk(todolistID:string){\r\n        return instance.get<GetTaskType>(`todo-lists/${todolistID}/tasks`)\r\n    },\r\n    createTsk(todolistID:string,title:string){\r\n        return instance.post<ResponseType<{item:TaskObjectType}>>(`todo-lists/${todolistID}/tasks`,{title})\r\n    },\r\n    updateTsk(todolistID:string,taskID:string,model:UpdateTasksModelType){\r\n        return instance.put<ResponseType<{item:TaskObjectType}>>(`todo-lists/${todolistID}/tasks/${taskID}`,model)\r\n    },\r\n    deleteTsk(taskID:string, todolistID:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}/tasks/${taskID}`)\r\n    },\r\n}\r\n","\r\nimport {ACTIONS_TYPE} from \"../../enums/actionsConstants\";\r\nimport {UpdateDomainTasksModelType} from \"../tasks-reducer\";\r\nimport {\r\n    ActionAddTodolistType,\r\n    ActionClearTodosDataType,\r\n    ActionGetTodolistType,\r\n    ActionRemoveTodolistType\r\n} from \"./todolists-actions\";\r\nimport {TaskObjectType} from \"../../api/types/taskApiType\";\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>;\r\nexport type DeleteTaskActionType = ReturnType<typeof deleteTaskAC>;\r\nexport type UpdateTaskActionType = ReturnType<typeof updateTaskAC>;\r\nexport type GetTasksActionType = ReturnType<typeof getTaskAC>;\r\n\r\nexport type ActionTaskType = AddTaskActionType | DeleteTaskActionType | UpdateTaskActionType | ActionClearTodosDataType\r\n    | ActionAddTodolistType | ActionRemoveTodolistType | ActionGetTodolistType | GetTasksActionType\r\n\r\n//--------------------------------------------------------------------------------------\r\n\r\nexport const getTaskAC = (TodolistID: string, tasks: Array<TaskObjectType>) => {\r\n    return {type: ACTIONS_TYPE.GET_TASKS_TYPE, TodolistID, tasks} as const\r\n}\r\nexport const addTaskAC = (task: TaskObjectType) => {\r\n    return {type: ACTIONS_TYPE.ADD_TASKS_TYPE, task} as const\r\n}\r\nexport const deleteTaskAC = (taskID: string, todolistID: string) => {\r\n    return {type: ACTIONS_TYPE.DELETE_TASKS_TYPE, taskID, todolistID} as const\r\n}\r\n\r\nexport const updateTaskAC = (todolistID: string, taskID: string, model: UpdateDomainTasksModelType) => {\r\n    return {type: ACTIONS_TYPE.UPDATE_TASKS_TYPE, todolistID, taskID, model} as const\r\n}","\r\nimport {TaskAPI} from \"../api/task-api\";\r\nimport { AppRootState, AppThunk} from \"./store\";\r\n\r\nimport {handleNetworkError, handleServerError} from \"../utils/error-utils\";\r\nimport {ACTIONS_TYPE} from \"../enums/actionsConstants\";\r\nimport { ActionTaskType, addTaskAC, deleteTaskAC, getTaskAC, updateTaskAC } from \"./actions/tasks-actions\";\r\nimport { ChangeLoadingStatusAC } from \"./actions/loader-actions\";\r\nimport {TaskPriorities, TaskStateType, TaskStatuses, UpdateTasksModelType} from \"../api/types/taskApiType\";\r\n\r\n//----------------------------------------------------------------------------------\r\n\r\n\r\nconst initialState: TaskStateType = {\r\n    // [TodolistID1]: [\r\n    //     {id: v1(), title: \"Javascript\", isDone: true},\r\n    //     {id: v1(), title: \"Node JS\", isDone: false},\r\n    //     {id: v1(), title: \"React\", isDone: true},\r\n    // ],\r\n    // [TodolistID2]: [\r\n    //     {id: v1(), title: \"HTML\", isDone: false},\r\n    //     {id: v1(), title: \"CSS\", isDone: false},\r\n    //     {id: v1(), title: \"Angular\", isDone: true}\r\n    // ]\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionTaskType): TaskStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.GET_TASKS_TYPE:\r\n            return {...state, [action.TodolistID]: action.tasks}\r\n\r\n        case ACTIONS_TYPE.GET_TODOLIST_TYPE:\r\n            let copyTasks = {...state};\r\n            action.todolist.forEach((tl:any) => {\r\n                copyTasks[tl.id] = []\r\n            });\r\n            return copyTasks;\r\n\r\n        case ACTIONS_TYPE.ADD_TASKS_TYPE:\r\n            debugger\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case ACTIONS_TYPE.DELETE_TASKS_TYPE:\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(task => task.id !== action.taskID)}\r\n\r\n        case ACTIONS_TYPE.UPDATE_TASKS_TYPE:\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(task => task.id === action.taskID ? {\r\n                    ...task,\r\n                    ...action.model\r\n                } : task)\r\n            }\r\n\r\n        case ACTIONS_TYPE.ADD_TODOLIST_TYPE:\r\n            return {...state, [action.todo.id]: []}\r\n        case ACTIONS_TYPE.REMOVE_TODOLIST_TYPE:\r\n            const newTasks = {...state}\r\n            delete newTasks[action.todolistId]\r\n            return newTasks\r\n        case ACTIONS_TYPE.CLEAR_TODOS_DATA:\r\n            return {}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//-----------------------------------------------------------------------------------------------------------------\r\nexport const getTaskTC = (todolistID: string): AppThunk => async dispatch => {\r\n    dispatch(ChangeLoadingStatusAC('loading'))\r\n    try {\r\n        const res = await TaskAPI.getTsk(todolistID)\r\n        dispatch(getTaskAC(todolistID, res.data.items))\r\n        dispatch(ChangeLoadingStatusAC('succeeded'))\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\nexport const deleteTaskTC = (taskID: string, todolistID: string): AppThunk => async dispatch => {\r\n    dispatch(ChangeLoadingStatusAC('loading'))\r\n    try {\r\n        await TaskAPI.deleteTsk(taskID, todolistID)\r\n        dispatch(deleteTaskAC(taskID, todolistID))\r\n        dispatch(ChangeLoadingStatusAC('succeeded'))\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string): AppThunk => async dispatch => {\r\n    dispatch(ChangeLoadingStatusAC('loading'))\r\n    try {\r\n        const res = await TaskAPI.createTsk(todolistID, title)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(ChangeLoadingStatusAC('succeeded'))\r\n        } else{\r\n            handleServerError(res.data,dispatch)\r\n        }\r\n\r\n    } catch (error:any) {\r\n        handleNetworkError(error,dispatch)\r\n    }\r\n}\r\n\r\nexport type UpdateDomainTasksModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (todolistID: string, taskID: string, model: UpdateDomainTasksModelType): AppThunk => {\r\n    return async (dispatch,\r\n                  getState: () => AppRootState) => {\r\n        dispatch(ChangeLoadingStatusAC('loading'))\r\n        try {\r\n            let allTasks = getState().tasks;\r\n            let task = allTasks[todolistID].find(ts => ts.id === taskID)\r\n            if (task) {\r\n                let newModel: UpdateTasksModelType = {\r\n                    title: task.title,\r\n                    description: task.description,\r\n                    status: task.status,\r\n                    priority: task.priority,\r\n                    startDate: task.startDate,\r\n                    deadline: task.deadline,\r\n                    ...model,\r\n                }\r\n                const res = await TaskAPI.updateTsk(todolistID, taskID, newModel)\r\n                dispatch(updateTaskAC(todolistID, taskID, model))\r\n                // dispatch(updateTaskAC(res.data.data.item))\r\n                dispatch(ChangeLoadingStatusAC('succeeded'))\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n}","\r\nimport {AppThunk} from \"./store\";\r\nimport {TodoListAPI, TodolistType} from \"../api/todolist-api\";\r\n\r\nimport {RequestStatusType} from \"./loader-reducer\";\r\nimport {handleNetworkError, handleServerError} from \"../utils/error-utils\";\r\nimport {getTaskTC} from \"./tasks-reducer\";\r\nimport { ACTIONS_TYPE } from \"../enums/actionsConstants\";\r\nimport { ActionTodolistType, addTodolistAC, changeEntityStatusAC, changeTodolistTitleAC, getTodosAC, removeTodolistAC } from \"./actions/todolists-actions\";\r\nimport { ChangeLoadingStatusAC } from \"./actions/loader-actions\";\r\n\r\n//----------------------------------------------------------------------------\r\nexport type typeFilter = 'All' | 'Active' | 'Completed'\r\n\r\nexport type TodolistStateType = TodolistType & {\r\n    filter: typeFilter\r\n    entityStatus:RequestStatusType\r\n}\r\n//---------------------------------------------------------------------------------\r\n\r\n\r\nconst initialState: Array<TodolistStateType> = []\r\nexport const todolistReducer = (state: Array<TodolistStateType> = initialState, action: ActionTodolistType): Array<TodolistStateType> => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.GET_TODOLIST_TYPE:\r\n            return action.todolist.map((tl) => ({...tl, filter: 'All', entityStatus:'idle'}))\r\n        case ACTIONS_TYPE.ADD_TODOLIST_TYPE:\r\n            return [{...action.todo, filter: 'All',entityStatus:'idle'}, ...state]\r\n        case ACTIONS_TYPE.REMOVE_TODOLIST_TYPE:\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE_TYPE:\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER_TYPE:\r\n            return state.map(td => td.id === action.todolistId ? {...td, filter: action.filter} : td)\r\n        case ACTIONS_TYPE.CHANGE_ENTITY_STATUS:\r\n            return state.map(todolist => todolist.id === action.todolistId ? {...todolist, entityStatus: action.status} : todolist)\r\n        case ACTIONS_TYPE.CLEAR_TODOS_DATA:\r\n            return []\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------\r\n// export const getTodosTC = ():AppThunk => (dispatch, getState: ()=>AppRootState) =>{\r\n//     TodoListAPI.getTodos()\r\n//         .then((res)=>{\r\n//             // debugger\r\n//             dispatch(getTodosAC(res.data))\r\n//         })\r\n// }\r\nexport const getTodosTC = (): AppThunk => async dispatch => {\r\n        dispatch(ChangeLoadingStatusAC('loading'))\r\n    try {\r\n        const res = await TodoListAPI.getTodos()\r\n        const todoLists = res.data\r\n        dispatch(getTodosAC(todoLists))  //запрашиваем тудулисты\r\n        todoLists.forEach(todoList =>{\r\n            dispatch(getTaskTC(todoList.id))  //и после запрашиваем таски для каждого тудулиста\r\n        })\r\n\r\n    } catch (error:any) {\r\n        handleNetworkError(error,dispatch)\r\n    } finally{\r\n        dispatch(ChangeLoadingStatusAC('succeeded'))\r\n    }\r\n\r\n}\r\nexport const addTodosTC = (title: string): AppThunk => async dispatch => {\r\n    dispatch(ChangeLoadingStatusAC('loading'))\r\n    try {\r\n        const res = await TodoListAPI.createTodos(title)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(ChangeLoadingStatusAC('succeeded'))\r\n        } else{\r\n            handleServerError(res.data,dispatch)\r\n        }\r\n    } catch (error:any) {\r\n        handleNetworkError(error,dispatch)\r\n    }\r\n}\r\nexport const deleteTodosTC = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(ChangeLoadingStatusAC('loading'))\r\n    dispatch(changeEntityStatusAC('loading',todolistId))\r\n    try {\r\n        const res = await TodoListAPI.deleteTodos(todolistId)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(ChangeLoadingStatusAC('succeeded'))\r\n        }else{\r\n            handleServerError(res.data,dispatch)\r\n        }\r\n    } catch (error:any) {\r\n        handleNetworkError(error,dispatch)\r\n    }\r\n\r\n}\r\nexport const updateTodosTitleTC = (title: string, todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(ChangeLoadingStatusAC('loading'))\r\n    try {\r\n        const res = await TodoListAPI.updateTodos(title, todolistId)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(changeTodolistTitleAC(title, todolistId))\r\n            dispatch(ChangeLoadingStatusAC('succeeded'))\r\n        }else{\r\n            handleServerError(res.data,dispatch)\r\n        }\r\n\r\n    } catch (error:any) {\r\n        handleNetworkError(error,dispatch)\r\n    }\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    name: string\r\n    changeTitle: (title:string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(({name,changeTitle}) => {\r\n    let [condition, setCondition] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(name)\r\n\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setCondition(true)\r\n        // setTitle(name)\r\n    }\r\n    const offEditMode = () => {\r\n        setCondition(false)\r\n        changeTitle(title)\r\n    }\r\n\r\n    const keyModeHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title) {\r\n            setCondition(false)\r\n            changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {condition ?\r\n                <TextField  type=\"text\"\r\n                            value={title}\r\n                            onBlur={offEditMode}\r\n                            autoFocus={true}\r\n                            onChange={changeTitleHandler}\r\n                            onKeyPress={keyModeHandler}>\r\n\r\n                </TextField>\r\n                : <span onDoubleClick={onEditMode}>{name}</span>\r\n            }\r\n        </>\r\n    );\r\n});\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport s from '../../App.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../state/store\";\r\n\r\nimport {deleteTaskTC, updateTaskTC} from \"../../state/tasks-reducer\";\r\nimport {EditableSpan} from \"../../Components/EditableSpan\";\r\nimport {TaskObjectType, TaskStatuses} from \"../../api/types/taskApiType\";\r\n\r\n\r\nexport type SingleTaskType ={\r\n    TaskID:string\r\n    TodolistID:string\r\n}\r\n\r\nexport const Task: React.FC<SingleTaskType> = React.memo(({TaskID, TodolistID}) => {\r\n    const dispatch = useDispatch()\r\n    const task = useSelector<AppRootState, TaskObjectType>(state => {\r\n       return  state.tasks[TodolistID].filter((ts:TaskObjectType) => ts.id === TaskID)[0]\r\n    })\r\n    const taskRemover = useCallback(()=> dispatch(deleteTaskTC(TaskID,TodolistID)), [])\r\n    const checkHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        let checkedData = e.currentTarget.checked;\r\n        let status = checkedData ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskTC(TodolistID, TaskID,{status}))\r\n    }\r\n    const changeTitle = useCallback((title:string) => dispatch(updateTaskTC(TodolistID, TaskID, {title})),[])\r\n    let inputChecked = task.status === TaskStatuses.Completed ? s.isDone : ''\r\n    return (\r\n        <>\r\n            <li key={task.id} className={inputChecked}>\r\n                <IconButton size={'small'} onClick={taskRemover}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                <Checkbox checked={task.status===TaskStatuses.Completed} onChange={checkHandler} size={'small'} color={'primary'}/>\r\n                <EditableSpan name={task.title} changeTitle={changeTitle}/>\r\n            </li>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default Task;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport {RequestStatusType} from \"../state/loader-reducer\";\r\n\r\nexport type InputType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?:RequestStatusType\r\n}\r\nexport const AddItemForm: React.FC<InputType> = React.memo(({ addItem, entityStatus}) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState(false)\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addHandler()\r\n        }\r\n    }\r\n    const addHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title)\r\n            setTitle('')\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField value={title} onChange={changeInputValue} size={'small'} label={'Title'}\r\n                           onKeyPress={onKeyHandler} variant={'outlined'} style={{height:'20px'}}\r\n                           helperText={error && 'Type some text'} color={\"primary\"} error={error}\r\n                           disabled={entityStatus==='loading'}>\r\n                </TextField>\r\n\r\n                <IconButton onClick={addHandler} color={'primary'} disabled={entityStatus==='loading'}>\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype NewButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    filter?:string\r\n}\r\n\r\nexport const NewButton = React.memo((props:NewButtonPropsType) => {\r\n\r\n    return (\r\n      <Button  onClick={props.callback} variant={'contained'} style={{margin:'0 5px 0 0'}}\r\n               size={'small'} color={props.filter === props.title ? \"secondary\" : \"primary\"}>\r\n          {props.title}\r\n      </Button>\r\n    )\r\n})","import React, {FC, useCallback} from 'react';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Task from \"./Task\";\r\nimport {typeFilter} from \"../../state/todolists-reducer\";\r\nimport {RequestStatusType} from \"../../state/loader-reducer\";\r\nimport {AppRootState} from \"../../state/store\";\r\nimport {addTaskTC} from \"../../state/tasks-reducer\";\r\nimport {EditableSpan} from \"../../Components/EditableSpan\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm\";\r\nimport {NewButton} from \"../../Components/NewButton\";\r\nimport {TaskObjectType, TaskStatuses} from \"../../api/types/taskApiType\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    changeTodolist: (filter:typeFilter, TodolistID: string) =>void\r\n    removeTodolist: (TodolistID:string) =>void\r\n    changeTodolistTitle:(title:string, TodolistID: string)=>void\r\n    filter:typeFilter\r\n    TodolistID:string\r\n    entityStatus:RequestStatusType\r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\nexport const Todolist: FC<PropsType> = React.memo(({title, changeTodolist, removeTodolist,\r\n                                                       changeTodolistTitle, filter, TodolistID, entityStatus}) => {\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootState, Array<TaskObjectType>>((state)=> state.tasks[TodolistID])\r\n    //берем таски для конкретного тудулиста\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getTaskTC(TodolistID))\r\n    // },[])\r\n\r\n//-----------------------------------------------------------------------------------------------------------------------\r\n    const todolistRemover = useCallback(()=> removeTodolist(TodolistID),[removeTodolist, TodolistID])\r\n    const changeTdlButton = useCallback((filter:typeFilter) => changeTodolist(filter, TodolistID), [changeTodolist,TodolistID])\r\n    const newAddTask = useCallback((title:string)=> dispatch(addTaskTC(TodolistID,title)),[dispatch])\r\n    const newTodolistTitle = useCallback((title:string)=> changeTodolistTitle(title, TodolistID),[changeTodolistTitle, TodolistID])\r\n\r\n    let filteredTasks = tasks\r\n    if (filter === 'Active') {\r\n        filteredTasks = tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'Completed') {\r\n        filteredTasks = tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n//-----------------------------------------------------------------------------------------------------------------\r\n    return <div>\r\n        <h3><EditableSpan name={title} changeTitle={newTodolistTitle}/>\r\n            <IconButton size={'medium'}  onClick={todolistRemover} style={{padding:\"5px\",fontSize:\"1rem\"}}\r\n            disabled={entityStatus==='loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm  addItem={newAddTask} entityStatus={entityStatus}/>\r\n\r\n        <ul style={{listStyle:\"none\", padding:\"0\"}}>\r\n\r\n            {filteredTasks.map((mTasks) => {\r\n                return <Task key={mTasks.id} TaskID={mTasks.id} TodolistID={TodolistID}/>\r\n            })}\r\n        </ul>\r\n\r\n        <div>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('All'),[changeTdlButton])} title={'All'} filter={filter}/>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('Active'),[changeTdlButton])} title={'Active'} filter={filter}/>\r\n            <NewButton callback={useCallback(()=> changeTdlButton('Completed'),[changeTdlButton])} title={'Completed'} filter={filter}/>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTodosTC,\r\n    deleteTodosTC,\r\n    getTodosTC,\r\n    TodolistStateType,\r\n    typeFilter,\r\n    updateTodosTitleTC\r\n} from \"../../state/todolists-reducer\";\r\nimport {AppRootState} from \"../../state/store\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport { changeTodolistFilterAC } from '../../state/actions/todolists-actions';\r\n\r\n\r\n//-----------------------------------------------------------------------------------------\r\nexport function TodoListContainer() {\r\n\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n    const todoLists = useSelector<AppRootState, Array<TodolistStateType>>((state) => state.todoLists)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getTodosTC())\r\n    }, [])\r\n\r\n\r\n    const changeTodolist = useCallback((value: typeFilter, TodolistID: string) => {\r\n        dispatch(changeTodolistFilterAC(value, TodolistID))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, TodolistID: string) => {\r\n        dispatch(updateTodosTitleTC(title, TodolistID))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((TodolistID: string) => {\r\n        dispatch(deleteTodosTC(TodolistID))\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodosTC(title))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn){\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"15px 0\", justifyContent: \"center\"}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={1}>\r\n                {todoLists.map(todolist => {\r\n                    return <Grid item key={todolist.id}>\r\n                        <Paper elevation={10} style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                key={todolist.id}\r\n                                TodolistID={todolist.id}\r\n                                entityStatus={todolist.entityStatus}\r\n                                title={todolist.title}\r\n                                changeTodolist={changeTodolist}\r\n                                filter={todolist.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {ErrorSnackBar} from \"./Components/ErrorSnackBar\";\r\nimport {RequestStatusType} from \"./state/loader-reducer\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"./features/Login\";\r\nimport {getAuthData, setLogOutData} from \"./state/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {TodoListContainer} from \"./features/TodolistsList/TodoListContainer\";\r\n\r\n//-----------------------------------------------------------------------------------------\r\nexport function AppWithReducers() {\r\n\r\n    const status = useSelector<AppRootState, RequestStatusType>((state) => state.loader.status)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state=> state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootState, boolean>(state=> state.loader.isInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=> {\r\n        dispatch(getAuthData())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <ErrorSnackBar/>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    {isLoggedIn ?\r\n                    <Button variant={\"outlined\"} color=\"inherit\" onClick={()=> dispatch(setLogOutData())}>LogOut</Button>\r\n                        : <div></div>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodoListContainer/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'/404'} element={<h1 style={{textAlign: \"center\"}}>404. PAGE NOT FOUND</h1>}/>\r\n                    <Route path={'/*'} element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","\r\nimport {ACTIONS_TYPE} from \"../enums/actionsConstants\";\r\nimport { ActionLoaderType } from \"./actions/loader-actions\";\r\n\r\n\r\nexport const InitialLoaderState:InitialLoaderStateType ={\r\n    status:'idle',\r\n    error: null,\r\n    isInitialized:false,\r\n}\r\n// export type InitialLoaderStateType = typeof InitialLoaderState\r\n\r\nexport const loaderReducer =\r\n    (state: InitialLoaderStateType = InitialLoaderState, action: ActionLoaderType):InitialLoaderStateType=> {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_LOADER_STATUS:\r\n            return {...state, status:action.status}\r\n        case ACTIONS_TYPE.SET_ERROR_MESSAGE:\r\n            return {...state, error:action.error}\r\n        case ACTIONS_TYPE.GET_INITIALIZED:\r\n            return {...state, isInitialized:action.initialized}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//-------------------------------------------------------------------------------------\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialLoaderStateType={\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport { todolistReducer} from \"./todolists-reducer\";\r\nimport { tasksReducer} from \"./tasks-reducer\";\r\n\r\nimport thunk from \"redux-thunk\";\r\nimport {ThunkAction} from \"redux-thunk/es/types\";\r\nimport {loaderReducer} from \"./loader-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport { ActionTodolistType } from \"./actions/todolists-actions\";\r\nimport { ActionTaskType } from \"./actions/tasks-actions\";\r\nimport { ActionLoaderType } from \"./actions/loader-actions\";\r\nimport { ActionAuthDataType } from \"./actions/auth-actions\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists:todolistReducer,\r\n    tasks:tasksReducer,\r\n    loader:loaderReducer,\r\n    auth:authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootState = ReturnType<typeof rootReducer>; // автоматически определяем тип общего стейта\r\nexport type AppActionsType = ActionTodolistType | ActionTaskType | ActionLoaderType | ActionAuthDataType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootState, unknown, AppActionsType>\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {AppWithReducers} from \"./AppWithReducers\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n        <AppWithReducers/>\r\n        </Provider>\r\n    </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}